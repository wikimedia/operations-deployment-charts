# Default values.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
app:
  image: repos/data-engineering/kafka
  version: latest # we use latest everywhere in the defaults.
  port: &port 8083 # port exposed as a Service, also used by service-checker.
  # Use command and args below to override the entrypoint. Type is arrays
  # Not necessary unless you want to change the entrypoint defined in the docker image
  # Example:
  # command: ["node"]
  # args: ["bin/server.js", "--param1", "arg1"]
  command: []
  args: []
  requests:
    cpu: 1m # Just some sample, edit these - 100m is the minimum for deployment
    memory: 200Mi # Just some sample, edit these
  limits:
    cpu: 1 # Just some sample, edit these
    memory: 400Mi # Just some sample, edit these
  liveness_probe:
    tcpSocket:
      port: *port
  readiness_probe:
    httpGet:
      path: /
      port: *port
  # add here any volumes to mount onto the pod. Example:
  #volumes:
  #- name: scratchdir
  #  emptyDir: {}
  # add here any mounted volumes to make accessible to the container. Example:
  #volumeMounts:
  #   - name: scratchdir # the name from your volume above
  #     mountPath: /scratch/ # where it should live in your container
monitoring:
  # If enabled is true, monitoring annotations will be added to the deployment.
  enabled: false

service:
  deployment: minikube # valid values are "production" and "minikube"
  port:
    name: http # a unique name of lowercase alphanumeric characters or "-", starting and ending with alphanumeric, max length 63
    # protocol: TCP # TCP is the default protocol
    targetPort: *port # the number or name of the exposed port on the container
    port: *port # the number of the port desired to be exposed to the cluster
    nodePort: null # you need to define this if "production" is used. In minikube environments let it autoallocate

config:
  public: {} # Add here all the keys that can be publicly available as a ConfigMap
  private: {} # Add here all the keys that should be private but still available as env variables

# Additional resources if we want to add a port for a debugger to connect to.
debug:
  enabled: false
  # Define here any port that you want to expose for debugging purposes
  ports: []

cronjobs: {}
#    my-cron-hourly:
#      name: my-cron-hourly
#      enabled: true
#      command:
#        - /bin/cowsay
#        - "hello"
#      schedule: "@hourly"
#      concurrency: Replace
#      image_versioned: my-app:1.1.1
#      resources:
#        requests:
#          cpu: 500m
#           memory: 200M
#        limits:
#          cpu: 500m
#          memory: 200M
#      volumeMounts:
#        - mountPath: "/tmp/acow"
#          name: tmp-cow-memory
#      volumes:
#        - name: tmp-cow-memory
#          emptyDir:
#            medium: Memory
#            sizeLimit: "10Gi"

docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent
resources:
  replicas: 1

mesh:
  enabled: false

monitoring:
  # If enabled is true, monitoring annotations will be added to the deployment.
  enabled: false

networkpolicy:
  egress:
    enabled: false

# Add here the list of kafka-clusters (by name) that the service will need to reach.
kafka:
  allowed_clusters: []

# Optional affinity settings
affinity: {}
#  affinity:
#    nodeAffinity:
#      requiredDuringSchedulingIgnoredDuringExecution:
#        nodeSelectorTerms:
#          - matchExpressions:
#              - key: some-key
#                operator: In
#                values:
#                  - some-value
#  nodeSelector:
#    node.kubernetes.io/some-key: some-value

# The set of external services to allow egress to
# Example:
# kafka:
# - main-codfw
# - main-eqiad
# presto:
# - analytics
#
# See https://wikitech.wikimedia.org/wiki/Kubernetes/Deployment_Charts#Enabling_egress_to_services_external_to_Kubernetes
# for the list of supported services
external_services: {}