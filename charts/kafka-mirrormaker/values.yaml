# Default values.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
app:
  image: repos/data-engineering/kafka
  version: latest # we use latest everywhere in the defaults.
  port: ~ # port exposed as a Service, also used by service-checker.
  # Use command and args below to override the entrypoint. Type is arrays
  # Not necessary unless you want to change the entrypoint defined in the docker image
  # Example:
  # command: ["node"]
  # args: ["bin/server.js", "--param1", "arg1"]
  command: ["/opt/kafka/bin/kafka-mirror-maker.sh"]
  args:
  - --consumer.config=/etc/mirrormaker/consumer.properties
  - --producer.config=/etc/mirrormaker/producer.properties
  - --include="{{ $.Values.config.mm.topics }}"
  - --num.streams={{ dig (splitList "-" $.Values.config.mm.source | first) "flags" "streams" $.Values.config.mm.flags.streams $.Values.config.mm }}
  - --offset.commit.interval.ms={{ dig (splitList "-" $.Values.config.mm.source | first) "flags" "offset_commit_interval_ms" $.Values.config.mm.flags.offset_commit_interval_ms $.Values.config.mm }}
  requests:
    cpu: 4
    memory: 8Gi
  limits:
    cpu: 4
    memory: 8Gi

  # mirrormaker does not expose ports
  liveness_probe: {}
  readiness_probe: {}

  # add here any volumes to mount onto the pod. Example:
  volumes:
  - name: kafka-mirrormaker-config
    configMap:
      name: kafka-mirrormaker-config
  # add here any mounted volumes to make accessible to the container. Example:
  volumeMounts:
    - name: kafka-mirrormaker-config # the name from your volume above
      mountPath: /etc/mirrormaker # where it should live in your container
monitoring:
  # If enabled is true, monitoring annotations will be added to the deployment.
  enabled: false

service: {}

config:
  public: # Add here all the keys that can be publicly available through the environment
    KAFKA_HEAP_OPTS: "-Xmx2G -Xms2G"
    KAFKA_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/mirrormaker/log4j.properties"
    LOG_DIR: /tmp/logs
  private: {} # Add here all the keys that should be private but still available as env variables
  mm:
    source: override_me
    target: override_me
    topics: override_me
    flags:
      offset_commit_interval_ms: 60000
      streams: 4
    consumer:
      exclude.internal.topics: true
      max.partition.fetch.bytes: "12058624"
      partition.assignment.strategy: org.apache.kafka.clients.consumer.RoundRobinAssignor
      security.protocol: SSL
      ssl.truststore.type: PEM
      ssl.truststore.location: /etc/ssl/certs/ca-certificates.crt
    producer:
      acks: all
      compression.type: snappy
      linger.ms: 1000
      max.request.size: "12058624"
      security.protocol: SSL
      ssl.truststore.type: PEM
      ssl.truststore.location: /etc/ssl/certs/ca-certificates.crt

# Additional resources if we want to add a port for a debugger to connect to.
debug:
  enabled: false
  # Define here any port that you want to expose for debugging purposes
  ports: []

cronjobs: {}
#    my-cron-hourly:
#      name: my-cron-hourly
#      enabled: true
#      command:
#        - /bin/cowsay
#        - "hello"
#      schedule: "@hourly"
#      concurrency: Replace
#      image_versioned: my-app:1.1.1
#      resources:
#        requests:
#          cpu: 500m
#           memory: 200M
#        limits:
#          cpu: 500m
#          memory: 200M
#      volumeMounts:
#        - mountPath: "/tmp/acow"
#          name: tmp-cow-memory
#      volumes:
#        - name: tmp-cow-memory
#          emptyDir:
#            medium: Memory
#            sizeLimit: "10Gi"

docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent
resources:
  replicas: 1

mesh:
  enabled: false

monitoring:
  # If enabled is true, monitoring annotations will be added to the deployment.
  enabled: false

networkpolicy:
  egress:
    enabled: false

# Add here the list of kafka-clusters (by name) that the service will need to reach.
kafka:
  allowed_clusters: []

# Optional affinity settings
affinity: {}
#  affinity:
#    nodeAffinity:
#      requiredDuringSchedulingIgnoredDuringExecution:
#        nodeSelectorTerms:
#          - matchExpressions:
#              - key: some-key
#                operator: In
#                values:
#                  - some-value
#  nodeSelector:
#    node.kubernetes.io/some-key: some-value

# The set of external services to allow egress to
# Example:
# kafka:
# - main-codfw
# - main-eqiad
# presto:
# - analytics
#
# See https://wikitech.wikimedia.org/wiki/Kubernetes/Deployment_Charts#Enabling_egress_to_services_external_to_Kubernetes
# for the list of supported services
external_services: {}