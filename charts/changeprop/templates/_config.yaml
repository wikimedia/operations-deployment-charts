{{- define "config.app" }}
{{- $purge_stream  := .Values.main_app.purge_stream -}}

# service-runner Changeprop app config.yaml.
spec: &spec
  x-sub-request-filters:
    - type: default
      name: http
      options:
        allow:
          - pattern: /^https?:\/\//
            forward_headers:
              user-agent: true
  title: The Change Propagation root
  paths:
{{- if eq .Values.service.deployment "production" }}
    /{api:sys}/limit:
      x-modules:
        - path: sys/rate_limiter.js
          options:
            redis: &redis_config
              host: {{ .Values.main_app.redis.host }}
              port: {{ .Values.main_app.redis.port }}
              password: {{ .Values.main_app.redis.pass | default "" }}
            limiters:
              blacklist:
                # First, allow no more then 100 errors per week
                # The precision parameter controls the step a sliding window moves by
                - interval: 604800
                  limit: 100
                  precision: 86400
                # Secondly to avoid bursts in case of outages, don't allow more then 10
                # errors per hour
                - interval: 3600
                  limit: 10
    /{api:sys}/dedupe:
      x-modules:
        - path: sys/deduplicator.js
          options:
            redis: *redis_config
{{- end }}
    /{api:sys}/links:
      x-modules:
        - path: sys/dep_updates.js
          options:
            templates:
              mw_api:
                uri: {{ .Values.main_app.changeprop.mwapi_uri }}
                headers:
                  host: '{{ `{{message.meta.domain}}` }}'
                body:
                  formatversion: 2
    /{api:sys}/queue:
      x-modules:
        - path: sys/kafka.js
          options:
            metadata_broker_list:
{{ toYaml .Values.main_app.kafka.broker_list | indent 14 }}
            dc_name: {{ .Values.main_app.site }}
{{- if (or .Values.main_app.kafka.consumer .Values.main_app.changeprop.kafka.consumer) }}
            consumer:
{{- with .Values.main_app.kafka.consumer }}
{{ toYaml . | indent 14 }}
{{- end -}}
{{- with .Values.main_app.changeprop.kafka.consumer }}
{{ toYaml . | indent 14 }}
{{- end -}}
{{- if .Values.main_app.kafka.ssl.enabled }}
{{ toYaml .Values.main_app.kafka.ssl.settings | indent 14 }}
{{- end -}}
{{- end }}
{{- if (or .Values.main_app.kafka.producer .Values.main_app.changeprop.kafka.producer) }}
            producer:
{{- with .Values.main_app.kafka.producer }}
{{ toYaml . | indent 14 }}
{{- end -}}
{{- with .Values.main_app.changeprop.kafka.producer }}
{{ toYaml . | indent 14 }}
{{- end -}}
{{- if .Values.main_app.kafka.ssl.enabled }}
{{ toYaml .Values.main_app.kafka.ssl.settings | indent 14 }}
{{- end -}}
{{- end }}
            concurrency: {{ .Values.main_app.concurrency }}
            startup_delay: 60000
            blacklist:
              # Wikipedia
              en.wikipedia.org:
                - 'User:B-bot/Event_log'
                - 'User:DeltaQuad/UAA/Wait'
                - 'User:JamesR/AdminStats'
                - 'User:Kudpung/Dashboard'
                # Various dashboards
                - 'User:Breawycker/Wikipedia'
                - 'User:Sonia/dashboard'
                - 'User:Ocaasi/dashboard'
                - 'User:Nolelover'
                - 'User:Calmer_Waters'
                - '/User%3ARedwolf24\//'
                - 'User:Technical_13/dashboard'
                - 'Template:Cratstats'
                # Cyberbot is creating 90% of null edits
                - '/User:Cyberbot_I\//'
                - '/User:Cyberbot_II\//'
                - '/User:Cyberpower678\//'
                - '/User:Darts170Darts170\//'
                - 'صارف:Cyberbot_I/Run/Adminstats'
                - 'Defnyddiwr:Cyberbot_I/Run/Adminstats'
                - 'User:Pentjuuu!.!/sandbox'
                - 'User:AllyD/CSDlog'
                - 'User:Peter_I._Vardy/sandbox-13'
                - 'User:I_dream_of_horses/CSD_log'
                - 'User:MJ180MJ180/sandbox'
              test.wikipedia.org:
                - 'T274359'
              commons.wikimedia.org:
                # T353876
                - '/File:Brezina_-_Brunelli/'
                - '/File:Claus_-_Conkle/'
            templates:

{{/* RESTBase sunset: Native PCS (mobileapps) pregeneration */ -}}
{{ if .Values.main_app.changeprop.features.rerendered_pcs_endpoints_native }}
              pcs_rerender_mobile_html_native_wikidata_change: &pcs_rerender_spec_native
                topic: 'change-prop.wikidata.resource-change'
                claim_ttl: {{ .Values.main_app.changeprop.claim_ttl.native_pcs_rerendering }}
                root_claim_ttl: {{ .Values.main_app.changeprop.claim_ttl.native_pcs_rerendering }}
                concurrency: {{ mul .Values.main_app.concurrency .Values.main_app.changeprop.pcs_rerender_concurrency_factor.pcs_rerender_mobile_html_native_wikidata_change }}
                match:
                  meta:
                    uri: '/^https?:\/\/[^\/]+\/wiki\/(?<title>.+)$/'
                exec:
{{ range .Values.main_app.changeprop.rerendered_pcs_endpoints_native }}
                  - method: get
                    uri: '{{ $.Values.main_app.changeprop.pcs_uri }}/{{ `{{message.meta.domain}}` }}/v1/page/{{ . }}/{decode(match.meta.uri.title)}'
                    headers:
                      cache-control: no-cache
                      if-unmodified-since: '{{ `{{date(message.meta.dt)}}` }}'
{{ end }}
              pcs_rerender_mobile_html_native_transcludes:
                <<: *pcs_rerender_spec_native
                topic: 'change-prop.transcludes.resource-change'
                concurrency: {{ mul .Values.main_app.concurrency .Values.main_app.changeprop.pcs_rerender_concurrency_factor.pcs_rerender_mobile_html_native_transcludes }}
                batch_size: {{ .Values.main_app.changeprop.batch_size.pcs_rerender_mobile_html_native_transcludes }}

              pcs_rerender_native_on_null:
                <<: *pcs_rerender_spec_native
                topic: 'resource_change'
                concurrency: {{ mul .Values.main_app.concurrency .Values.main_app.changeprop.pcs_rerender_concurrency_factor.pcs_rerender_native_on_null }}

              pcs_rerender_native_on_edit:
                topic: 'mediawiki.revision-create'
                concurrency: {{ mul .Values.main_app.concurrency .Values.main_app.changeprop.pcs_rerender_concurrency_factor.pcs_rerender_native_on_edit }}
                match:
                  rev_content_changed: true
                exec:
{{ range .Values.main_app.changeprop.rerendered_pcs_endpoints_native }}
                  - method: get
                    uri: '{{ $.Values.main_app.changeprop.pcs_uri }}/{{ `{{message.meta.domain}}` }}/v1/page/{{ . }}/{message.page_title}'
                    headers:
                      cache-control: no-cache
{{ end }}
              pcs_rerender_native_on_visibility_change:
                topic: 'mediawiki.revision-visibility-change'
                exec:
{{ range .Values.main_app.changeprop.rerendered_pcs_endpoints_native }}
                  - method: get
                    uri: '{{ $.Values.main_app.changeprop.pcs_uri }}/{{ `{{message.meta.domain}}` }}/v1/page/{{ . }}/{message.page_title}/{{ `{{message.rev_id}}` }}'
                    headers:
                      cache-control: no-cache
                  - method: get
                    uri: '{{ $.Values.main_app.changeprop.pcs_uri }}/{{ `{{message.meta.domain}}` }}/v1/page/{{ . }}/{message.page_title}'
                    headers:
                      cache-control: no-cache
{{ end }}
              pcs_rerender_native_on_page_move:
                topic: 'mediawiki.page-move'
                exec:
{{ range .Values.main_app.changeprop.rerendered_pcs_endpoints_native }}
                  - method: get
                    uri: '{{ $.Values.main_app.changeprop.pcs_uri }}/{{ `{{message.meta.domain}}` }}/v1/page/{{ . }}/{message.page_title}'
                    headers:
                      cache-control: no-cache
                  - method: get
                    uri: '{{ $.Values.main_app.changeprop.pcs_uri }}/{{ `{{message.meta.domain}}` }}/v1/page/{{ . }}/{message.prior_state.page_title}'
                    headers:
                      cache-control: no-cache
{{ end }}
              pcs_rerender_native_on_page_delete:
                topics:
                  - 'mediawiki.page-delete'
                  - 'mediawiki.page-suppress'
                exec:
{{ range .Values.main_app.changeprop.rerendered_pcs_endpoints_native }}
                  - method: get
                    uri: '{{ $.Values.main_app.changeprop.pcs_uri }}/{{ `{{message.meta.domain}}` }}/v1/page/{{ . }}/{message.page_title}'
                    headers:
                      cache-control: no-cache
{{ end }}
              pcs_rerender_native_page_images_summary:
                topic: mediawiki.page-properties-change
                # We don't support 'OR' in the match section, so workaround it by 2 cases with identical exec
                cases:
                  - match:
                      - added_properties:
                          page_image: '/.+/' # Regex that matches anything just to check the prop is set
                    match_not:
                      - meta:
                          domain: /\.wikidata\.{{ .Values.main_app.changeprop.domain_zone }}$/
                        page_namespace: 0
                      - meta:
                          domain: /\.wikidata\.{{ .Values.main_app.changeprop.domain_zone }}$/
                        page_namespace: 120
                    exec:
                      method: get
                      uri: '{{ .Values.main_app.changeprop.pcs_uri }}/{{ `{{message.meta.domain}}` }}/v1/page/summary/{message.page_title}'
                      headers:
                        cache-control: no-cache
                  - match:
                      - removed_properties:
                          page_image: '/.+/' # Regex that matches anything just to check the prop is set
                    match_not:
                      - meta:
                          domain: /\.wikidata\.{{ .Values.main_app.changeprop.domain_zone }}$/
                        page_namespace: 0
                      - meta:
                          domain: /\.wikidata\.{{ .Values.main_app.changeprop.domain_zone }}$/
                        page_namespace: 120
                    exec:
                      method: get
                      uri: '{{ .Values.main_app.changeprop.pcs_uri }}/{{ `{{message.meta.domain}}` }}/v1/page/summary/{message.page_title}'
                      headers:
                        cache-control: no-cache
{{ end -}}

{{ if .Values.main_app.changeprop.features.purge_varnish }}
              generate_purge_varnish: &purge_varnish_spec
                enable_blacklist: false
                topic: 'resource_change'
                match:
                  meta:
                    uri: '/^https?:\/\/[^\/]+\/api\/rest_v1\/(?<title>.+)$/'
                  tags:
                    - restbase
                match_not:
                  meta:
                    domain: /\.wikidata\.{{ .Values.main_app.changeprop.domain_zone }}$/
                exec:
                  method: 'post'
                  uri: '/sys/queue/events'
                  body:
                    - $schema: '/resource_change/1.0.0'
                      meta:
                        uri: '{{`{{message.meta.uri}}`}}'
                        stream: '{{ $purge_stream }}'
                        domain: '{{`{{message.meta.domain}}`}}'
                        dt: '{{`{{message.meta.dt}}`}}'
                      root_event: '{{`{{message.root_event}}`}}'

              generate_purge_varnish_transcludes: &purge_varnish_transcludes_spec
                <<: *purge_varnish_spec
                topic: 'change-prop.transcludes.resource-change'
{{ end -}}

              # RESTBase update jobs
{{ if .Values.main_app.changeprop.features.page_edit }}
              page_edit:
                topic: mediawiki.revision-create
                limiters:
                  blacklist: 'html:{message.meta.uri}'
                retry_on:
                  status:
                    - '5xx'
                    - 404 # Sometimes occasional 404s happen because of the mysql replication lag, so retry
                match:
                  rev_content_changed: true
                match_not:
                  - meta:
                      domain: /\.wikidata\.{{ .Values.main_app.changeprop.domain_zone }}$/
                    page_namespace: 0
                  - meta:
                      domain: /\.wikidata\.{{ .Values.main_app.changeprop.domain_zone }}$/
                    page_namespace: 120
                    # Block Scribunto Module dependencies as they create a lot of load
                    # with supposingly very low actual effect
                  - meta:
                      domain: '/wiktionary\.{{ .Values.main_app.changeprop.domain_zone }}$/'
                    page_namespace: 828
                exec:
                  - method: post
                    uri: '/sys/links/transcludes/{message.page_title}'
                    body: '{{ `{{globals.message}}` }}'
{{ end -}}

{{ if .Values.main_app.changeprop.features.page_delete }}
              page_delete:
                disable_blacklist: true
                topics:
                  - mediawiki.page-delete
                  - mediawiki.page-suppress
                ignore:
                  status:
                    - 404 # 404 is a normal response for page deletion
                    - 412
                match_not:
                  - meta:
                      domain: /\.wikidata\.{{ .Values.main_app.changeprop.domain_zone }}$/
                    page_namespace: 0
                  - meta:
                      domain: /\.wikidata\.{{ .Values.main_app.changeprop.domain_zone }}$/
                    page_namespace: 120
                # The links to the deleted page should become red again
                exec:
                  - method: post
                    uri: '/sys/links/backlinks/{message.page_title}'
                    body: '{{ `{{globals.message}}` }}'
{{ end -}}
{{ if .Values.main_app.changeprop.features.page_restore }}
              page_restore:
                disable_blacklist: true
                topic: mediawiki.page-undelete
                match_not:
                  - meta:
                      domain: /\.wikidata\.{{ .Values.main_app.changeprop.domain_zone }}$/
                    page_namespace: 0
                  - meta:
                      domain: /\.wikidata\.{{ .Values.main_app.changeprop.domain_zone }}$/
                    page_namespace: 120
                exec:
                  # The links to the restored page should not be red any more
                  - method: post
                    uri: '/sys/links/backlinks/{message.page_title}'
                    body: '{{ `{{globals.message}}` }}'
{{ end -}}
{{ if .Values.main_app.changeprop.features.on_transclusion_update }}
              on_transclusion_update:
                concurrency: {{ mul .Values.main_app.concurrency 2 }}
                topic: change-prop.transcludes.resource-change
                limiters:
                  blacklist: 'html:{message.meta.uri}'
                cases:
                  - match:
                      $schema: '/^\/change-prop\/continue\/.*/'
                    match_not:
                      - meta:
                          domain: ceb.wikipedia.org
                      - original_event:
                          # Block Scribunto Module dependencies as they create a lot of load
                          # with supposingly very low actual effect
                          meta:
                            domain: '/wiktionary\.{{ .Values.main_app.changeprop.domain_zone }}$/'
                          page_namespace: 828
                    exec:
                      method: post
                      uri: '/sys/links/transcludes/{message.original_event.page_title}'
                      body: '{{ `{{globals.message}}` }}'
{{ end -}}
{{ if .Values.main_app.changeprop.features.page_create }}
              page_create:
                topic: mediawiki.page-create
                retry_on:
                  status:
                    - '5xx'
                    - 404 # Sometimes occasional 404s happen because of the mysql replication lag, so retry
                match_not:
                  - meta:
                      domain: /\.wikidata\.{{ .Values.main_app.changeprop.domain_zone }}$/
                    page_namespace: 0
                  - meta:
                      domain: /\.wikidata\.{{ .Values.main_app.changeprop.domain_zone }}$/
                    page_namespace: 120
                exec:
                  - method: post
                    uri: '/sys/links/backlinks/{message.page_title}'
                    body: '{{ `{{globals.message}}` }}'
{{ end -}}
{{ if .Values.main_app.changeprop.features.on_backlinks_update }}
              on_backlinks_update:
                topic: change-prop.backlinks.resource-change
                limiters:
                  blacklist: 'html:{message.meta.uri}'
                cases:
                  - match:
                      $schema: '/^\/change-prop\/continue\/.*/'
                    exec:
                      method: post
                      uri: '/sys/links/backlinks/{message.original_event.page_title}'
                      body: '{{ `{{globals.message}}` }}'
{{ end -}}
{{ if .Values.main_app.changeprop.features.wikidata_description_on_edit }}
              wikidata_description_on_edit:
                topic: mediawiki.revision-create
                cases:
                  - match:
                      meta:
                        domain: www.wikidata.org
                      page_namespace: 0
                      # It's impossible to modify a comment in wikidata while editing the entity.
                      comment: '/wbeditentity|wbsetdescription|undo|restore/'
                      rev_content_changed: true
                    exec:
                      method: post
                      uri: '/sys/links/wikidata_descriptions'
                      body: '{{ `{{globals.message}}` }}'
                  - match:
                      meta:
                        domain: www.wikidata.org
                      page_namespace: 0
                      rev_is_revert: true
                    exec:
                      method: post
                      uri: '/sys/links/wikidata_descriptions'
                      body: '{{ `{{globals.message}}` }}'
{{ end -}}
{{ if .Values.main_app.changeprop.features.wikidata_description_on_undelete }}
              wikidata_description_on_undelete:
                topic: mediawiki.page-undelete
                match:
                  meta:
                    domain: www.wikidata.org
                  page_namespace: 0
                exec:
                  method: post
                  uri: '/sys/links/wikidata_descriptions'
                  body: '{{ `{{globals.message}}` }}'
{{ end -}}
{{ if .Values.main_app.changeprop.features.liftwing_models }}
{{ range $model_name, $model_settings := .Values.main_app.changeprop.liftwing.models }}
              # Score every edit generated by wikis supported by Lift Wing's model server.
              # Lift Wing will generate a new event and it will send it to EventGate.
              liftwing_{{ $model_name }}:
                topic: {{ $model_settings.kafka_topic }}
                concurrency: {{ $model_settings.concurrency }}
                retry_on:
                  status:
                    - 503
                    - 502
                {{- $need_quotes := ($model_settings.match_config_need_quotes | default list) }}
                {{- if hasKey $model_settings "match_config" }}
                {{- range $match_action, $match_settings := $model_settings.match_config }}
                {{ $match_action }}:
                {{- if hasKey $match_settings "meta" }}
                  meta:
                    {{- range $k, $v := $match_settings.meta }}
                    {{- if has $k $need_quotes }}
                    {{ $k }}: {{ $v | quote }}
                    {{- else }}
                    {{ $k }}: {{ $v }}
                    {{- end }}
                    {{- end }}
                {{- end }}
                {{- if hasKey $match_settings "page" }}
                  page:
                    {{- range $k, $v := $match_settings.page }}
                    {{- if has $k $need_quotes }}
                    {{ $k }}: {{ $v | quote }}
                    {{- else }}
                    {{ $k }}: {{ $v }}
                    {{- end }}
                    {{- end }}
                {{- end }}
                  {{- range $k, $v := (omit $match_settings "meta" "page") }}
                  {{- if has $k $need_quotes }}
                  {{ $k }}: {{ $v | quote }}
                  {{- else }}
                  {{ $k }}: {{ $v }}
                  {{- end }}
                  {{- end }}
                {{- end }}
                {{- end }}
                exec:
                  method: post
                  {{- if $model_settings.message_wiki_selector }}
                  uri: '{{ $.Values.main_app.changeprop.liftwing.uri }}/v1/models/{{ "{{message." }}{{ $model_settings.message_wiki_selector }}{{ "}}" }}-{{ $model_name }}:predict'
                  headers:
                    host: '{{ "{{message." }}{{ $model_settings.message_wiki_selector }}{{ "}}" }}-{{ $model_name }}.{{ $model_settings.namespace }}.wikimedia.org'
                  {{- else }}
                  uri: '{{ $.Values.main_app.changeprop.liftwing.uri }}/v1/models/{{ $model_name }}:predict'
                  headers:
                    host: '{{ $model_name }}.{{ $model_settings.namespace }}.wikimedia.org'
                  {{- end }}
                    content-type: application/json
                  body:
                    event: '{{ `{{globals.message}}` }}'
{{ end -}}
{{ end -}}
# Number of worker processes to spawn.
# Set to 0 to run everything in a single process without clustering.
# Use 'ncpu' to run as many workers as there are CPU units
num_workers: {{ .Values.main_app.num_workers }}

# Number of workers to start in parallel after the first worker.
# The first worker is always started independently. After it has completed
# its start-up, this number controls the number of workers to start in
# parallel until `num_workers` have been started. Note that setting this
# number to a too high a value might lead to high resource consumption
# (especially of CPU) during the start-up process.
startup_concurrency: 4

# Log error messages and gracefully restart a worker if v8 reports that it
# uses more heap (note: not RSS) than this many mb.
worker_heap_limit_mb: 750

worker_heartbeat_timeout: false

# Logger info
logging:
  level:  {{ .Values.main_app.log_level | default "info" }}
  sampled_levels:
    error/commit_check: 1
  streams:
    - type: stdout
      named_levels: true
{{- if .Values.logging.samples }}
  sampled_levels:
{{- range $level, $rate :=  .Values.logging.samples }}
    {{ $level }}: {{ $rate }}
{{ end -}}
{{ end }}

# Statsd metrics reporter

metrics:
  name: {{ .Values.metrics.name }}
  host: {{ .Values.metrics.host }}
  port: {{ .Values.metrics.port }}
  type: statsd

services:
  - name: {{ .Values.service.name }}
    # a relative path or the name of an npm package, if different from name
    module: hyperswitch
    # per-service config
    conf:
      cors: "*"
      port: {{ .Values.app.port }}
      # interface: localhost # uncomment to only listen on localhost
      # URL of the outbound proxy to use (complete with protocol)
      proxy: {{ .Values.main_app.proxy | default "" }}
      # the list of domains for which not to use the proxy defined above
      # no_proxy_list:
      #   - domain1.com
      #   - domain2.org
      # the list of incoming request headers that can be logged; if left empty,
      # the following headers are allowed: cache-control, content-length,
      # content-type, if-match, user-agent, x-request-id
      # log_header_whitelist:
      #   - cache-control
      #   - content-length
      #   - content-type
      #   - if-match
      #   - user-agent
      #   - x-request-id
      user_agent: ChangePropagation/WMF
      spec: *spec
{{- end}}
