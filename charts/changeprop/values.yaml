# This can be useful when backporting fixes.
helm_scaffold_version: 0.2

docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent

resources:
  replicas: 1

rollingUpdateStrategy:
  # 25% is our default
  maxSurge: "25%"
  maxUnavailable: "25%"

main_app:
  image: wikimedia/mediawiki-services-change-propagation
  # See https://tools.wmflabs.org/dockerregistry/wikimedia/mediawiki-services-change-propagation/tags/ for available versions
  # Use latest in defaults and replace in the production files with the correct tag.
  version: latest
  # port exposed as a Service, also used by service-checker.
  port: 7272
  command: ["node"]
  args: ["server.js", "-c", "/etc/changeprop/config.yaml"]
  requests:
    cpu: 500m
    memory: 300Mi
  limits:
    cpu: 1
    memory: 600Mi
  liveness_probe:
    tcpSocket:
      port: 7272
    initialDelaySeconds: 60

  concurrency: 50

  # We don't need to use a master/worker architecture
  # when change-prop is running in a container, so explicitly
  # force service runner to create a single process.
  num_workers: 0

  # Log threshold. Defaults info in template if not defined here
  log_level: debug

  proxy:

  site: datacenter1

  changeprop:
    kafka: {}

    domain_zone: org

    event_service_uri: localhost:32192/v1/events

    # List of endpoints used for PCS deployed behind REST gateway (restbase sunset)
    rerendered_pcs_endpoints_native:
      - media-list
      - mobile-html
      - summary

    # Replace the Mediawiki URI with the correct K8s URI
    mwapi_uri: http://localhost/w/api.php

    # Replace the Restbase URI with the correct K8s URI
    restbase_uri: http://localhost:7231

    # Replace the PCS URI (mobileapps) with the correct K8s URI
    pcs_uri: http://localhost:4102

    liftwing:
      # Replace the Restbase URI with the correct K8s URI
      uri: http://localhost:30443

    features:
      # null edit uses features of mw_purge - also includes on_wikidata_description_change
      mw_purge_null_edit: true
      summary_definition_rerender: true
      purge_varnish: true
      page_edit: true
      revision_visibility_change: true
      page_delete: true
      page_restore: true
      page_move: true
      on_transclusion_update: true
      page_create: true
      on_backlinks_update: true
      wikidata_description_on_edit: true
      wikidata_description_on_undelete: true
      page_images_summary: true
      liftwing_models: false
      rerendered_pcs_endpoints_native: true

  jobqueue:
    # if jobqueue is true, then we'll configure our pod as a
    # changeprop-jobqueue instance. If it's false, we'll assume that
    # we're doing regular changeprop.
    enabled: false
    partitioners: false
    kafka: {}
    jobrunner_uri: null
    # jobs using changeprop's built-in partitioning system
    partitioned_jobs_config: {}
    # jobs that require their own config definition outside of the low
    # traffic defaults
    high_traffic_jobs_config: {}
    # latency-sensitive job config - currently functionally identical
    # to high traffic, but changing in future
    latency_sensitive_jobs_config: {}
    # jobs under the mediawiki.job.* hierarchy that we want jobqueue
    # to completely ignore (unless defined in the other *jobs_config
    # configs
    excluded_jobs: []

  purge_stream: resource-purge

  # kafka
  kafka:
    broker_list:
      - localhost
    # Base consumer/producer config, shared by all instances.
    # NOTE: the change-prop values for Beta/Deployment-Prep
    # are defined in values-beta yaml file.
    # More info:
    # https://wikitech.wikimedia.org/wiki/Changeprop#To_deployment-prep
    consumer:
      # JobQueue jobs might sent messages larget then 1 Meg,
      # so we increase the max message size in kafka and have to
      # ajust the consumers accordingly.
      fetch.message.max.bytes: 4194304
      # Silence noisy connection reaper logging
      # https://github.com/Blizzard/node-rdkafka/issues/326
      # https://github.com/edenhill/librdkafka/issues/768#issuecomment-246302856
      log.connection.close: false
    producer:
      compression.codec: snappy
      # Silence noisy connection reaper logging
      # https://github.com/Blizzard/node-rdkafka/issues/326
      # https://github.com/edenhill/librdkafka/issues/768#issuecomment-246302856
      log.connection.close: false
    ssl:
      enabled: true
      settings:
        # Set these to enable Kafka producer TLS (no authentication, just encryption).
        security.protocol: ssl
        ssl.ca.location: /etc/ssl/certs/wmf-ca-certificates.crt

  # redis
  redis:
    host: 127.0.0.1
    port: 6379
    pass:

logging:
  samples: {}

nutcracker:
  enabled: false
  servers: [] # The form is <IP>:<port>:<db> "name" for each element

subcharts:
  # Set this to true during local minikube development to get a Kafka pod deployed.
  # You only need to do this if you don't manually install the kafka-dev chart.
  kafka: false

# metrics
metrics:
  name: changeprop
  host: localhost
  port: 9125

# monitoring
monitoring:
    enabled: false
    image_version: latest

service:
  name: changeprop
  # valid values are "production" and "minikube"
  deployment: "minikube"
  port:
    name: changeprop
    targetPort: 7272
    port: 7272
    nodePort: null

config:
  # Add here all the keys that can be publicly available as a ConfigMap
  public: {}
  # Add here all the keys that should be private but still available as env variables
  private: {}

mesh:
  enabled: false
  image_version: 1.13.1-2
  # the port where TLS will be exposed
  public_port: 2345
  certs:
    cert: "snakeoil"
    key: "snakeoil"
  # Enable telemetry
  telemetry:
    enabled: false
    port: 9361

# Additional resources if we want to add a port for a debugger to connect to.
debug:
  enabled: false
  # Define here any port that you want to expose for debugging purposes
  ports: []

# Enable networkpolicy egress rules
networkpolicy:
  egress:
    enabled: false

common_images:
  nutcracker:
    nutcracker: "nutcracker:latest"

app:
  port: 7272

# The set of external services to allow egress to
# Example:
# kafka:
# - main-codfw
# - main-eqiad
# presto:
# - analytics
#
# See https://wikitech.wikimedia.org/wiki/Kubernetes/Deployment_Charts#Enabling_egress_to_services_external_to_Kubernetes
# for the list of supported services
external_services: {}
