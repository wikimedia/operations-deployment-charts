{{- range .Values.revscoring_inference_services }}
# This is a special config for revscoring-based InferenceService.
# Please don't use it for any other use case, see the more generic service.yaml.
{{- $model := .model | default $.Values.inference.model }}
apiVersion: serving.kserve.io/v1beta1
kind: InferenceService
metadata:
  name: "{{ .wiki }}-{{ $model}}"
  annotations:
    {{ if $.Values.monitoring.enabled -}}
    prometheus.io/scrape: "true"
    {{ end -}}
    prometheus.io/port: {{ $.Values.main_app.queue_proxy.revision_metrics_port | quote }}
  {{- range $k, $v := $.Values.inference.annotations }}
    {{ $k }}: {{ $v | quote }}
  {{- end }}
  labels:
    app-wmf: {{ template "base.name.chart" $ }}
    chart: {{ template "base.name.chartid" $ }}
    release: {{ $.Release.Name }}
  {{- range $k, $v := $.Values.inference.labels }}
    {{ $k }}: {{ $v | quote }}
  {{- end }}
spec:
  # The predictor is the only supported config for the moment,
  # since transformers don't fit very well in the revscoring architecture.
  predictor:
    {{- $generic_predictor := $.Values.inference.predictor | default dict }}
    {{- $custom_predictor := .predictor | default dict }}
    {{- $final_predictor_config := merge ($custom_predictor.config | default dict) ($generic_predictor.config | default dict) }}
    {{- $final_predictor_env := concat ($generic_predictor.base_env | default list) ($custom_predictor.custom_env | default list) }}
    {{- $wiki_url_set := false }}
    {{- range $final_predictor_env }}
      {{- if eq .name "WIKI_URL" }}
          {{- $wiki_url_set = true }}
      {{- end }}
    {{- end }}
    {{- $s3_storage_base_uri := .s3_storage_base_uri | default $.Values.inference.s3_storage_base_uri }}
    # The wiki names are usually something like "en", "it", etc..
    # But in some cases, we have "enwikitionary", "enwikibooks". Thes are corner
    # cases, but we have to include them in our logic. If "wiki" is found in
    # the wiki variable value, it will be used as is for the s3 path, otherwise
    # the suffix "wiki" will be appended.
    # en => en + "wiki"
    # enwikibooks => enwikibooks
    {{- $s3_storage_wiki_name := or .use_model_from_wiki .wiki }}
    {{- if $final_predictor_config }}
    {{- toYaml $final_predictor_config | nindent 4 }}
    {{- end }}
    containers:
    - name: kserve-predictor-{{ .wiki }}-{{ $model}}
      image: {{ $.Values.docker.registry }}/{{ $custom_predictor.image | default $generic_predictor.image }}:{{ $custom_predictor.version | default $generic_predictor.version }}
      imagePullPolicy: {{ $.Values.docker.imagePullPolicy }}
      env:
      # To have a more DRY config, we add INFERENCE_NAME and WIKI_HOST
      # automatically.
      - name: INFERENCE_NAME
        value: {{ .wiki }}-{{ $model}}
      {{- $sanitized_host := (printf "%s.wikipedia.org" (regexReplaceAll "wiki$" .wiki "")) }}
      {{- if not $wiki_url_set }}
      - name: WIKI_URL
        value: "{{ $.Values.transparent_proxy_protocol | default "http" }}://{{ .host | default $sanitized_host }}:{{ $.Values.transparent_proxy_port | default "80"}}"
      {{- end }}
      - name: WIKI_HOST
        value: {{ .host | default $sanitized_host }}
      - name: STORAGE_URI
        value: {{ $s3_storage_base_uri }}/{{ $model }}/{{ $s3_storage_wiki_name }}/{{ .version }}/
      {{- range $final_predictor_env }}
      - name: {{ .name }}
        value: {{ .value | quote }}
      {{- end }}
      {{- $container_config := merge ($custom_predictor.container | default dict) ($generic_predictor.container | default dict) }}
      {{- if $container_config }}
      {{- toYaml $container_config | nindent 6 }}
      {{- end }}
---
{{- end }}
