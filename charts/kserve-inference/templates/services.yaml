{{- range $inference_name, $inference_settings := .Values.inference_services }}
apiVersion: serving.kserve.io/v1beta1
kind: InferenceService
metadata:
  name: {{ $inference_name | quote }}
  annotations:
    {{ if $.Values.monitoring.enabled -}}
    prometheus.io/scrape: "true"
    {{ end -}}
    prometheus.io/port: {{ $.Values.main_app.queue_proxy.revision_metrics_port | quote }}
  {{- range $k, $v := merge ($inference_settings.annotations) ($.Values.inference.annotations) }}
    {{ $k }}: {{ $v | quote }}
  {{- end }}
  labels:
    app-wmf: {{ template "base.name.chart" $ }}
    chart: {{ template "base.name.chartid" $ }}
    release: {{ $.Release.Name }}
  {{- range $k, $v := $.Values.inference.labels }}
    {{ $k }}: {{ $v | quote }}
  {{- end }}
spec:
  # Assumption: the predictor is mandatory, so some config (either generic or
  # custom) is supposed to be present.
  predictor:
    {{- $generic_predictor := $.Values.inference.predictor | default dict }}
    {{- $custom_predictor := get $inference_settings "predictor" | default dict }}
    {{- $final_predictor_config := merge ($custom_predictor.config | default dict) ($generic_predictor.config | default dict) }}
    {{- if $final_predictor_config }}
    {{- toYaml $final_predictor_config | nindent 4 }}
    {{- end }}
    containers:
    - name: kserve-predictor-{{ $inference_name }}
      image: {{ $.Values.docker.registry }}/{{ $custom_predictor.image | default $generic_predictor.image }}:{{ $custom_predictor.image_version | default $generic_predictor.version }}
      imagePullPolicy: {{ $.Values.docker.imagePullPolicy }}
      env:
      {{- range concat ($generic_predictor.base_env | default list) ($custom_predictor.custom_env | default list) }}
      - name: {{ .name }}
        value: {{ .value | quote }}
      {{- end }}
      {{- $container_config := merge ($custom_predictor.container | default dict) ($generic_predictor.container | default dict) }}
      {{- if $container_config }}
      {{- toYaml $container_config | nindent 6 }}
      {{- end }}

  {{- $generic_transformer := $.Values.inference.transformer | default dict }}
  {{- $custom_transformer := get $inference_settings "transformer" | default dict }}
  {{- $final_transformer_config := merge ($custom_transformer.config | default dict) ($generic_transformer.config | default dict) }}
  {{- if or (hasKey $custom_transformer "image") (hasKey $generic_transformer "image") }}
  # If there is a generic transformer set in the inference config
  # we render it, giving the possibility to the admins to override
  # values in each model's config. We use the Docker image name (mandatory)
  # to allow the following: predictor-only configs and generic transformer settings
  # (like dnsConfig etc..) in the main chart's values.yaml (without causing transformer
  # settings to be rendered when not needed).
  transformer:
    {{- if $final_transformer_config }}
    {{- toYaml $final_transformer_config | nindent 4 }}
    {{- end }}
    containers:
    - name: kserve-transformer-{{ $inference_name }}
      image: {{ $.Values.docker.registry }}/{{ $custom_transformer.image | default $generic_transformer.image }}:{{ $custom_transformer.image_version | default $generic_transformer.version }}
      imagePullPolicy: {{ $.Values.docker.imagePullPolicy }}
      env:
      {{- range concat ($generic_transformer.base_env | default list) ($custom_transformer.custom_env | default list) }}
      - name: {{ .name }}
        value: {{ .value | quote }}
      {{- end }}
      {{- $transformer_container_config := merge ($custom_transformer.container | default dict) ($generic_transformer.container | default dict) }}
      {{- if $transformer_container_config }}
      {{- toYaml $transformer_container_config | nindent 6 }}
      {{- end }}

  {{- end }}
---
{{- end }}
