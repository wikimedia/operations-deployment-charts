# Default values for miscweb.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
helm_scaffold_version: 0.3 # This can be useful when backporting fixes.
docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent
resources:
  replicas: 1
main_app:
  # Application type.
  type: "default"
  image: sre/miscweb/statictendril
  version: main
  port: 8080 # port exposed as a Service, also used by service-checker.
  command: []
  args: []
  requests:
    cpu: 100m
    memory: 1024Mi
  limits:
    cpu: 1
    memory: 1024Mi
  liveness_probe:
    tcpSocket:
      port: 8080
  readiness_probe:
    httpGet:
      path: /
      port: 8080
sidecar:
  enabled: false
  command: []
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 200m
    memory: 512Mi
monitoring:
  # If enabled is true, monitoring annotations will be added to the deployment.
  enabled: false
  # If the application emits its metrics using statsd, we need to use the prometheus-statsd exporter
  # For service-runner based apps using service-runner < 2.8, this should be set to true
  uses_statsd: true
  # image_version: latest # image_version is defined globally by SRE. May be overridden here, though.
service:
  deployment: minikube # valid values are "production" and "minikube"
  port:
    name: http
    # protocol: TCP # TCP is the default protocol
    targetPort: 8080 # the number or name of the exposed port on the container
    port: 8080 # the number of the port desired to be exposed to the cluster
    nodePort: null # you need to define this if "production" is used. In minikube environments let it autoallocate
config:
  public: {}
  private: {}

mesh:
  enabled: false # Switch to true in production
  # image_version: 1.15.1-2 # image_version is defined globally by SRE. May be overridden here, though.
  public_port: 8080 # the port where TLS will be exposed
  upstream_timeout: "30.0s"
  # To be defined in a private space
  certs:
    cert: "snakeoil"
    key: "snakeoil"
  # Add here, via our "secret" system, the cert/key pairs
  #   cert: "your cert here"
  #   key: "your key here"
  # Enable telemetry
  telemetry:
    enabled: true
    port: 9361

# Additional resources if we want to add a port for a debugger to connect to.
debug:
  enabled: false
  # Define here any port that you want to expose for debugging purposes
  ports: []

networkpolicy:
  egress:
    enabled: false

common_images:
  httpd:
    exporter: prometheus-apache-exporter:latest

# Allow external traffic to reach this service via a (cluster provided) ingress controller.
# https://wikitech.wikimedia.org/wiki/Kubernetes/Ingress#Configuration_(for_service_owners)
ingress:
  enabled: false
  # By default, enabling ingress will switch the charts services from type NodePort to
  # ClusterIP. While that is fine for new services it may not be desired during transition
  # of existing ones from dedicated LVS to Ingress.
  # By setting keepNodePort to true, the services will stay of type NodePort.
  keepNodePort: false
  # Setting staging to true will use the staging domain to generate the default gateway
  # hosts. It will also ensure that default staging cergen certificates are be trusted.
  staging: false
  # gatewayHosts settings configure the hostnames this service will be reachable on.
  # By default, this will be a list like:
  # - {{ gatewayHosts.default }}.discovery.wmnet
  # - {{ gatewayHosts.default }}.svc.codfw.wmnet
  # - {{ gatewayHosts.default }}.svc.eqiad.wmnet
  #
  # And in case .Values.ingress.staging is true:
  # - {{ gatewayHosts.default }}.k8s-staging.discovery.wmnet
  gatewayHosts:
    # default will expand to {{ .Release.Namespace }} as long as it is an empty string.
    default: ""
    # disableDefaultHosts may be set to true if the service should not be reachable via
    # the gateway hosts generated by default (see above).
    disableDefaultHosts: false
    # extraFQDNs is a list of extra FQDNs this service should be reachable on.
    # It can be used to extend the gateway hosts that are generated by default.
    extraFQDNs: []
  # If you want to attach routes of this release to an existing Gateway, provide the name
  # of that gateway here in the format: <namespace>/<gateway-name>
  # This is useful if you wish to make multiple releases available from the same hostname.
  existingGatewayName: ""
  # routeHosts is a list of FQDNs the httproutes should attach to.
  # If existingGatewayName not set, this list might be empty and will default to the gateway
  # host generated according to how .Values.gatewayHosts.* is configured.
  # If existingGatewayName is set, you need to provide the FQDNs your routes should attach to.
  routeHosts: []
  # HTTPRoute routing rules. By default https://<hosts from above>/ will be routed to
  # the service without modification.
  # Docs: https://istio.io/v1.9/docs/reference/config/networking/virtual-service/#HTTPRoute
  httproutes: []
app:
  port: 8080

# additional configmaps which can be mounted in the application container
#configMaps:
#  spring-config:
#    application.properties: |
#        app.name=MyApp
#        app.env=production

# The configmap can be mounted with a main_app.volumeMounts:
#main_app:
#  volumeMounts:
#    - name: spring-config
#      mountPath: /path/to/folder

# The set of external services to allow egress to
# Example:
# kafka:
# - main-codfw
# - main-eqiad
# presto:
# - analytics
#
# See https://wikitech.wikimedia.org/wiki/Kubernetes/Deployment_Charts#Enabling_egress_to_services_external_to_Kubernetes
# for the list of supported services
external_services: {}