helm_scaffold_version: 0.2
docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent
resources:
  replicas: 1
main_app:
  image: envoy
  version: latest
  port: 8087
  # change this in values files if you want to avoid running the
  # default envoy image entrypoint
  command: ~
  args: []
  requests:
    cpu: 500m
    memory: 500Mi
  limits:
    cpu: 1
    memory: 800Mi
  liveness_probe:
    tcpSocket:
      port: 8087

  # idle connection timeout to backend clusters - low to limit issues
  # with connection reuse
  idle_timeout: 5s

  # mw_api definition for reuse in egress and backend definition
  mw_api:
    host: mw-api-int.discovery.wmnet
    port: 4446
    ips:
      - 10.2.2.81/32
      - 10.2.1.81/32
  # If set to true, expose a telemetry port that offers stats and
  # health endpoint. Enables but does not expose the admin port internally
  telemetry_port: null
  jwt:
    enabled: false
    # String that matches the "iss" field in a JWT *EXACTLY* - be
    # careful with leading "https://" and trailing "/"
    issuer: null

  # if true, enable a debug server that echoes requests - see README.md
  http_https_echo: false
  ratelimiter:
    enabled: false
    # By default, Envoy will strip the wmf-user-id and wmf-user-class headers from the request to the ratelimit service.
    # for testing purposes, we can allow them to be passed through by setting this to true.
    allow_client_headers: false
    # "shadow mode" instructs the rate limiter to allow all requests but generate metrics about
    # which ones would have been denied ("dry run").
    # See https://github.com/envoyproxy/ratelimit?tab=readme-ov-file#shadowmode
    shadow_mode: false
    # The default value for the group key in the rate limit descriptor.
    # This can be used to switch between different rate limiting regimes
    # defined in _ratelimit.yaml.
    # Individual routes can override this by setting the use_rate_limit_group value.
    # NOTE: This is used for rest-gateway routes only, it's ignored for api-gateway routes.
    default_policy: experiment-2025
    # Whether routes need to opt into rate limiting.
    # Individual routes can opt in or out by setting the apply_rate_limiting value.
    # NOTE: This is used for rest-gateway routes only, it's ignored for api-gateway routes.
    require_opt_in: false
    # The rate limiting class to apply if the user identity is not know.
    # This can be set to "no-limit" for testing, when we only want to enforce rate limits
    # under special circumstances.
    fallback_class: "anon"
    # The name of a cookie that will be trusted to contain the user's identity for use in
    # rate limiting. The empty string means trust no cookie. Trusting a cookie to contain
    # the correct identity is generally unsafe, but can be good enough for testing and
    # evaluation while a better source of truth (like a JWT) is not available.
    # In WMF production, one useful value might be "centralauth_User".
    user_id_cookie: ""

    # image version
    version: latest
    metrics_port: 9090
    port: 8081
    requests:
      cpu: 200m
      memory: 200Mi
    limits:
      cpu: 500m
      memory: 1000Mi
    key_prefix: ""
    key_log_format: "" # TODO: define log format usable with old api gateway rate limiting
    anon_limit:
      requests_per_unit: 500
      unit: HOUR
    default_limit:
      requests_per_unit: 5000
      unit: HOUR
    prefixes_without_required_jwt:
      - prefix: "/wiki/"
      - prefix: "/w/"
      - path: "/"
    # timeout for connecting from envoy to ratelimit service in seconds
    envoy_timeout: 0.25

  # Type of access logging
  access_log:
    # if set to false, only 5xx errors will be logged unless sample_percentage is set
    enable: false
    # if set to an integer, sample that percentage of all
    # requests. Applies when firehose access log is enabled or
    # disabled, independent of 5xx logging.
    #sample_percentage: 2

  # by default, envoy does not normalise URLs paths at present. keep
  # in mind that the docs hint that in future this default will
  # change.
  normalise_paths: false

  # Explicitly strip cookies from API route requests and responses -
  # don't strip cookies from /wiki/ and other endpoints.
  strip_api_cookies: false

  # populated from secrets - JSON web key sets
  jwks:
    kid: ""
    key: ""

  # If this list is populated, we will not configure the gateway
  # as an API gateway, but as a REST gateway
  rest_gateway_routes: []

  endpoints:
    # for /core/ URLs
    mwapi_cluster:
      type: LOGICAL_DNS
      hosts: {}
      # Specifies the host to support debug routing to via X-Wikimedia-Debug
      debug_hosts: {}
    # use for /v1/ which visual editor etc use
    restbase_cluster:
      type: LOGICAL_DNS
      hosts: {}
    # used for /feed/
    rest_gateway_cluster:
      type: LOGICAL_DNS
      hosts: {}
    # used for descriptions
    mobileapps_cluster:
      type: LOGICAL_DNS
      hosts: {}
    # used to serve the API portal
    appserver_cluster:
      type: LOGICAL_DNS
      hosts: {}
      debug_hosts: {}
  # Hosts with $service.discovery.wmnet records
  # Note that discovery_hosts behaves differently to the hosts dictionaries above.
  # the format of each entry is:
  # myservice:
  #   tls: true
  #   port: 12345
  #   path: myservicename
  #   ratelimit_config: # optional
  #     anon_limit: 1234
  #     default_limit: 12345
  #   host: myrewrittenhostname.wikimedia.org # optional
  #   internal_host: myserviceinternalname.discovery.wmnet # optional
  # This will map api.wikimedia.org/service/myservicename to
  # myserviceinternalname.discovery.wmnet:12345 internally.

  # If internal_host is not specified, myservice.discovery.wmnet will be used as a default
  # ratelimit_config is optional and is used to override the global rate limits

  # "host" is an optional parameter to rewrite the Host header from
  # api.wikimedia.org to whatever is specified. Used for when a
  # service only responds when a particular Host header is
  # expected. If not specified, the header is unchanged.

  # "host_rewrite_path" can be specified instead of "host" in order to
  # do a regex replacement between the path and the internal host
  # header using a SINGLE group. More than one group is not supported
  # at this time, and using more than one will break routing.
  #
  # For example, for a path of "abc(a|b)" and a host_rewrite_path of
  # "servicename-\1.wikimedia.org", requests to the path
  # /service/abca/1234 will be requested internally with a host header
  # of servicename-a.wikimedia.org. The internal service request will
  # have a path of /1234 as normal.

  # "full_path_trim" is a special option for services (such as
  # liftwing) that will maintain the full query string (as opposed to
  # using everything after the matching url path) when querying the
  # backend service while trimming the specified value.
  #
  # This would mean that
  # * a "full_path_trim" of "/service/mygroup"
  # * a service path of "/service/mygroup/mything"
  # * a query string of "/service/mygroup/mything/12345
  # would cause the backend service to be queried for /mything/12345.
  #
  # To contrast, not specifying a full_path_trim will cause this query
  # and service path combination resulting in the backend query being
  # /12345.
  #
  # full_path_trim will override host_rewrite_path parsing of paths,
  # but host_rewrite_path will still function for rewriteing of Host
  # headers.
  #

  # allow_cache if set to true will return the cache-control headers
  # set by the service. If this parameter is *not* set, we will emit a
  # no-cache header by default. This is to allow us to control the
  # cache at the gateway level while allowing services that should be
  # cached to still emit the header as they see fit.
  #

  discovery_endpoints: {}

  # run a local redis container for testing - see README for
  # instructions
  dev_redis: false

  # domains that the API Gateway will answer for. Be sure to set your
  # Host headers accordingly.
  domains:
    - localhost
    - localhost:*
    - 127.0.0.1
    - 127.0.0.1:*

  # This map maps URLs that will be requested of api.wikimedia.org to
  # a *path* that is requested of the appservers. The map key is a
  # api.wikimedia.org/{path} regex match. Path property is a regex
  # substitution to compute the appserver path, and 'host' property
  # is a regex substitution used to compute the host header value
  # to send to the appserver.
  #Example:
  #pathing_map:
  #  mwapi_cluster:
  #    '/core/v1/localtesting/(\w+)/(.*)':
  #      path: '/w/rest.php/v1/\2'
  #      host: '\1.wikipedia.org'

  pathing_map: {}

nutcracker:
  enabled: false
  port: 6379
  servers: [] # The form is <IP>:<port>:<db> "name" for each element

service:
  deployment: minikube
  port:
    name: api-gateway
    targetPort: 8087
    port: 8087
    nodePort: null
config:
  public: {}
  private: {}

# This chart does not actually use the tls-proxy/service mesh like others do
# but it incorporates parts of it (for TLS termination), so we use the same
# config structure here.
mesh:
  enabled: false
  certs:
    cert: "snakeoil"
    key: "snakeoil"
  certmanager:
    enabled: false
  # public_port must be set in order for the cert-manager certificate to be
  # rendered. It is not used for anything else.
  public_port: "Value that evaluates to true but is not a valid port"

networkpolicy:
  egress:
    enabled: false

common_images:
  nutcracker:
    nutcracker: "nutcracker:latest"

app:
  port: 8087
