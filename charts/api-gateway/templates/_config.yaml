{{- define "config.app" }}
# api gateway envoy config
{{ if .Values.main_app.telemetry_port -}}
admin:
  access_log:
    typed_config:
      "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
  address:
    socket_address:
      protocol: TCP
      address: 127.0.0.1
      port_value: 1666
{{ end -}}
static_resources:
  listeners:
{{- if .Values.main_app.telemetry_port }}
  - name: telemetry_listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: {{ .Values.main_app.telemetry_port }}
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          http_filters:
          - name: envoy.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
              pass_through_mode: false
              headers:
                - name: ":path"
                  string_match:
                    exact: "/healthz"
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          http_protocol_options: {accept_http_10: true}
          route_config:
            virtual_hosts:
            - domains: ['*']
              name: admin_cluster
              routes:
              - match:
                  prefix: /metrics
                route:
                  cluster: admin_cluster
                  prefix_rewrite: "/stats/prometheus"
              - match:
                  prefix: /stats
                route:
                  cluster: admin_cluster
                  prefix_rewrite: "/stats"
                  timeout: 5.0s
              - match:
                  prefix: /
                direct_response:
                  status: 403
                  body: {inline_string: "You can't access this url."}
          stat_prefix: admin_cluster
{{- end }}
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: {{ .Values.app.port }}
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          # configure logging
          access_log:
            name: envoy.file_access_log
            filter:
{{- if .Values.main_app.access_log.enable }}
              and_filter:
                filters:
                  - not_health_check_filter: {}
{{- if .Values.main_app.access_log.sample_percentage }}
                  - runtime_filter:
                      # This is a required-optional value read from
                      # runtime that is used for overriding - we don't
                      # want to do that so use a junk value.
                      runtime_key: "key_never_used_optional_required"
                      percent_sampled:
                        numerator: {{ .Values.main_app.access_log.sample_percentage}}
                        denominator: HUNDRED
{{- end }}
{{- else }}
              or_filter:
                filters:
                  - status_code_filter:
                      comparison:
                        op: "GE"
                        value:
                          default_value: 500
                          runtime_key: rest_gateway_min_log_code
{{- if .Values.main_app.access_log.sample_percentage }}
                  - runtime_filter:
                      # This is a required-optional value read from
                      # runtime that is used for overriding - we don't
                      # want to do that so use a junk value.
                      runtime_key: "key_never_used_optional_required"
                      percent_sampled:
                        numerator: {{ .Values.main_app.access_log.sample_percentage}}
                        denominator: HUNDRED
{{- end }}
{{- end }}
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/stdout
              log_format:
                omit_empty_values: true
                json_format:
                  $schema: "/api-gateway/request/1.0.0"
                  meta:
                    uri: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                    request_id: "%REQ(X-REQUEST-ID)%"
                    dt: "%START_TIME(%FT%TZ)%"
                    domain: "%REQ(HOST)%"
                    stream: "api-gateway.request"
                  http:
                    method: "%REQ(:METHOD)%"
                    protocol: "%PROTOCOL%"
                    status_code: "%RESPONSE_CODE%"
                    client_ip: "%REQ(X-FORWARDED-FOR)%"
                    request_headers:
                      user-agent: "%REQ(USER-AGENT)%"
                  total_time_ms: "%DURATION%"
                  client_id: "%DYNAMIC_METADATA(envoy.filters.http.jwt_authn:jwt_payload:aud)%"
                  route: "%ROUTE_NAME%"
          use_remote_address: true
{{- if .Values.main_app.normalise_paths }}
          normalize_path: true
{{- end }}
          local_reply_config:
            # Override the empty %LOCAL_REPLY_BODY% for 404 to "Not Found"
            mappers:
              - filter:
                  status_code_filter:
                    comparison:
                      op: EQ
                      value:
                        default_value: 404
                        runtime_key: unused_key_404
                body:
                  inline_string: "Not Found"
            # Default format applied to all error responses
            body_format:
              json_format:
                httpCode: "%RESPONSE_CODE%"
                httpReason: "%LOCAL_REPLY_BODY%"
          route_config:
{{- if .Values.main_app.rest_gateway_routes }}
{{ include "restgateway.routes" . }}
{{- else }}
{{ include "apigateway.routes" . }}
{{- end }}
          http_filters:
          - name: envoy.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
              pass_through_mode: false
              headers:
                - name: ":path"
                  string_match:
                    exact: "/healthz"
          - name: envoy.filters.http.cors
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
{{- if .Values.main_app.jwt.enabled }}
          - name: envoy.filters.http.jwt_authn
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
              providers:
                wikimedia:
                  issuer: {{ .Values.main_app.jwt.issuer }}
                  local_jwks:
                    filename: /etc/jwks/jwks.json
                  forward: true
                  from_headers:
                    name: Authorization
                    value_prefix: Bearer
                  payload_in_metadata: "jwt_payload"
              rules:
{{ include "apigateway.ratelimit_rules" . }}
{{- end }}
{{- if .Values.main_app.ratelimiter.enabled }}
          - name: envoy.filters.http.ratelimit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
              domain: wikimedia
              stage: 0
              timeout: {{ .Values.main_app.ratelimiter.envoy_timeout }}s
              enable_x_ratelimit_headers: DRAFT_VERSION_03
              rate_limit_service:
                transport_api_version: V3
                grpc_service:
                  envoy_grpc:
                    cluster_name: rate_limit_cluster
{{- end }}
          - name: envoy.filters.http.header_to_metadata
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.header_to_metadata.v3.Config
              request_rules:
                - header: "x-wikimedia-debug"
                  on_header_present:
                    metadata_namespace: envoy.lb
                    key: x_wikimedia_debug_server
                    regex_value_rewrite:
                      pattern:
                        regex: "^backend=([\\w.]+).*$"
                      substitution: "\\1"
                  on_header_missing:
                    metadata_namespace: envoy.lb
                    key: x_wikimedia_debug_server
                    value: none
                    type: STRING
{{- if .Values.main_app.rest_gateway_routes }}
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
{{ include "restgateway.lua" . | indent 16 }}
{{- end }}
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
{{- if .Values.mesh.enabled }}
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            {{- if (.Values.mesh.certmanager | default dict).enabled }}
            {{- /*
            Configure envoy to read certificates from static SDS config.
            This will enable an inotify watcher and hot-reloading on certificate changes.
            */}}
            tls_certificate_sds_secret_configs:
              name: tls_sds
              sds_config:
                path_config_source:
                  path: /etc/envoy/tls_certificate_sds_secret.yaml
                resource_api_version: V3
            {{- else }}
            tls_certificates:
              - certificate_chain: {filename: /etc/envoy/ssl/service.crt}
                private_key: {filename: /etc/envoy/ssl/service.key}
            {{- end }}
{{- end }}
  clusters:
{{- /* BEGIN endpoints cluster definition */}}
{{- range $cluster_name, $cluster_opts := .Values.main_app.endpoints }}
{{- if $cluster_opts }}
{{- if $cluster_opts.hosts }}
  - name: {{ $cluster_name }}
    connect_timeout: 0.25s
    max_requests_per_connection: 1000
    common_http_protocol_options:
      idle_timeout: {{ $.Values.main_app.idle_timeout }}
    type: {{ $cluster_opts.type }}
    lb_policy: ROUND_ROBIN
    # required for non-ipv6 services on localhost or elsewhere
    dns_lookup_family: V4_ONLY
{{- if $cluster_opts.tls }}
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        common_tls_context:
          tls_params:
            tls_minimum_protocol_version: TLSv1_2
            cipher_suites: ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
          validation_context:
            trusted_ca:
              filename: /etc/ssl/certs/wmf-ca-certificates.crt
{{- end }}
    lb_subset_config:
      fallback_policy: "DEFAULT_SUBSET"
      default_subset:
        x_wikimedia_debug_server: none
      subset_selectors:
        - keys:
            - x_wikimedia_debug_server
    load_assignment:
      cluster_name: {{ $cluster_name }}
      endpoints:
      - lb_endpoints:
{{- range $host, $port := $cluster_opts.hosts }}
        - endpoint:
            address:
              socket_address:
                address: {{ $host }}
                port_value: {{ $port }}
          metadata:
            filter_metadata:
              envoy.lb:
                x_wikimedia_debug_server: none
{{- end }}
{{- range $host, $port := $cluster_opts.debug_hosts }}
        - endpoint:
            address:
              socket_address:
                address: {{ $host }}
                port_value: {{ $port }}
          metadata:
            filter_metadata:
              envoy.lb:
                x_wikimedia_debug_server: {{ $host }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- /* END endpoints cluster definition */}}
{{- /* BEGIN discovery cluster definition */}}
{{- range $cluster_name, $cluster_opts := .Values.main_app.discovery_endpoints }}
{{- $address := $cluster_opts.internal_host | default (printf  "%s.discovery.wmnet" $cluster_name )}}
  - name: {{ $cluster_name }}_cluster
    connect_timeout: 0.25s
    max_requests_per_connection: 1000
    common_http_protocol_options:
      idle_timeout: {{ $.Values.main_app.idle_timeout }}
    type: LOGICAL_DNS
    lb_policy: ROUND_ROBIN
    # required for non-ipv6 services on localhost or elsewhere
    dns_lookup_family: V4_ONLY
{{- if $cluster_opts.tls }}
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        {{- if $cluster_opts.ingress }}
        sni: {{ $address }}
        {{- end }}
        common_tls_context:
          tls_params:
            tls_minimum_protocol_version: TLSv1_2
            cipher_suites: ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
          validation_context:
            trusted_ca:
              filename: /etc/ssl/certs/wmf-ca-certificates.crt
{{- end }}
    load_assignment:
      cluster_name: {{ $cluster_name }}_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: {{ $address }}
                port_value: {{ $cluster_opts.port }}
{{- end }}
{{- /* END discovery cluster definition */}}
{{- if .Values.main_app.ratelimiter.enabled }}
  - name: rate_limit_cluster
    type: static
    connect_timeout: 0.25s
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: rate_limit_cluster
      endpoints:
        - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: {{ .Values.main_app.ratelimiter.port }}
{{- end }}
{{ if .Values.main_app.telemetry_port }}
  - name: admin_cluster
    type: static
    connect_timeout: 0.25s
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: admin_cluster
      endpoints:
        - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 1666
{{- end }}
{{- end }}
