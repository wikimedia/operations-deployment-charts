apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "base.name.release" . }}
  labels:
    app: {{ template "base.name.chart" . }}
    chart: {{ template "base.name.chartid" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "base.name.chart" . }}
      release: {{ .Release.Name }}
  replicas: {{ .Values.resources.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "base.name.chart" . }}
        release: {{ .Release.Name }}
        routed_via: {{ .Values.routed_via | default .Release.Name }}
      annotations:
        checksum/config: {{ include "config.app" . | sha256sum }}
        checksum/secrets: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- if and .Values.mesh.enabled (not (.Values.mesh.certmanager | default dict).enabled) }}
        checksum/tls-certs: {{ printf "%v" (values .Values.mesh.certs | sortAlpha) | sha256sum }}
        {{- end }}
        {{ if .Values.main_app.jwt.enabled }}
        checksum/jwks: {{ include "jwks.config" . | sha256sum }}
        {{ end -}}
        {{ if .Values.nutcracker.enabled -}}
        checksum/nutcracker: {{ include "nutcracker.config" . | sha256sum }}
        {{ end -}}
        {{ if .Values.main_app.ratelimiter -}}
        checksum/ratelimit: {{ include "ratelimit.config" . | sha256sum }}
        {{ end -}}
        {{ if .Values.monitoring.enabled -}}
        checksum/prometheus-statsd: {{ .Files.Get "config/prometheus-statsd.conf" | sha256sum }}
        {{ end -}}
        prometheus.io/scrape: "true"
    spec:
      {{- if .Values.affinity }}
      {{- toYaml .Values.affinity | nindent 6 }}
      {{- end }}
      containers:
        # The main application container
        - name: {{ template "base.name.release" . }}
          image: "{{ .Values.docker.registry }}/{{ .Values.main_app.image }}:{{ .Values.main_app.version }}"
          imagePullPolicy: {{ .Values.docker.pull_policy }}
          {{- if .Values.main_app.command }}
          command:
            {{- range .Values.main_app.command }}
            - {{ . }}
            {{- end }}
          {{- end }}
          {{- if .Values.main_app.args }}
          args:
            {{- range .Values.main_app.args }}
            - {{ . }}
            {{- end }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.app.port }}
            {{- if .Values.main_app.telemetry_port }}
            - containerPort: {{ .Values.main_app.telemetry_port }}
            {{- end }}
          {{- if .Values.main_app.liveness_probe }}
          livenessProbe:
          {{- toYaml .Values.main_app.liveness_probe | nindent 12 }}
          {{- end }}
          {{- if .Values.main_app.readiness_probe }}
          readinessProbe:
          {{- toYaml .Values.main_app.readiness_probe | nindent 12 }}
          {{- end }}
          env:
            - name: SERVICE_NAME
              value: {{ .Release.Name }}
            - name: SERVICE_ZONE
              value: "default"
          {{- range $k, $v := .Values.config.public }}
            - name: {{ $k | upper }}
              value: {{ $v | quote }}
          {{- end }}
          {{- range $k, $v := .Values.config.private }}
            - name: {{ $k | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ template "base.name.release" $ }}-secret-config
                  key: {{ $k }}
          {{- end }}
          resources:
            requests:
{{ toYaml .Values.main_app.requests | indent 14 }}
            limits:
{{ toYaml .Values.main_app.limits | indent 14 }}
          volumeMounts:
            - name: {{ .Release.Name }}-base-config
              mountPath: /etc/envoy/
{{- if .Values.main_app.jwt.enabled }}
            - name: {{ .Release.Name }}-jwt-config
              mountPath: /etc/jwks/
{{- end }}
{{- if .Values.mesh.enabled }}
            - name: {{ .Release.Name }}-tls-certs-volume
              mountPath: /etc/envoy/ssl
              readOnly: true
{{- end }}
{{- with .Values.main_app.volumeMounts }}
{{ toYaml . | indent 12 }}
{{- end }}
{{- include "base.helper.restrictedSecurityContext" . | indent 10 }}
{{- if .Values.monitoring.enabled }}
        - name: {{ .Release.Name }}-metrics-exporter
          image: {{ .Values.docker.registry }}/prometheus-statsd-exporter:{{ .Values.monitoring.image_version }}
          imagePullPolicy: {{ .Values.docker.pull_policy }}
          volumeMounts:
            - name: {{ .Release.Name }}-metrics-exporter
              mountPath: /etc/monitoring
{{- include "base.helper.restrictedSecurityContext" . | indent 10 }}
{{- end }}
{{- if .Values.nutcracker.enabled }}
        - name: {{ .Release.Name }}-nutcracker
          image: {{ .Values.docker.registry }}/{{ .Values.common_images.nutcracker.nutcracker }}
          imagePullPolicy: {{ .Values.docker.pull_policy }}
          args:
            - "-o"
            - "/dev/stdout"
          ports:
            - containerPort: {{ .Values.nutcracker.port }}
          volumeMounts:
            - name: {{ .Release.Name }}-nutcracker-config
              mountPath: /etc/nutcracker
              readOnly: true
{{- include "base.helper.restrictedSecurityContext" . | indent 10 }}
{{- end }}
{{- if .Values.main_app.http_https_echo }}
        - name: {{ .Release.Name }}-http-https-echo
          image: mendhak/http-https-echo:latest
          imagePullPolicy: {{ .Values.docker.pull_policy }}
          ports:
            - containerPort: 8888
          env:
            - name: HTTP_PORT
              value: "8888"
{{- include "base.helper.restrictedSecurityContext" . | indent 10 }}
{{- end }}
{{- if .Values.main_app.dev_redis }}
        - name: {{ .Release.Name }}-redis
          image: redis:latest
          imagePullPolicy: {{ .Values.docker.pull_policy }}
          ports:
            - containerPort: 6379
{{- include "base.helper.restrictedSecurityContext" . | indent 10 }}
{{- end }}
{{- if .Values.main_app.ratelimiter.enabled }}
{{- if not .Values.nutcracker.enabled }}
{{ fail "Cannot start envoy ratelimiter without nutcracker running" -}}
{{- end }}
        - name: {{ .Release.Name }}-ratelimit
          image: {{ .Values.docker.registry }}/ratelimit:{{ .Values.main_app.ratelimiter.version }}
          imagePullPolicy: {{ .Values.docker.pull_policy }}
          ports:
            - containerPort: {{ .Values.main_app.ratelimiter.port }}
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
          env:
            - name: REDIS_URL
              value: {{ .Values.main_app.ratelimiter.redis_host }}:{{ .Values.main_app.ratelimiter.redis_port }}
            - name: LOG_LEVEL
              value: {{ .Values.main_app.ratelimiter.log_level }}
            - name: RUNTIME_ROOT
              value: /etc
            - name: RUNTIME_SUBDIRECTORY
              value: ratelimit
            - name: USE_STATSD
              value: "{{ .Values.monitoring.enabled }}"
            - name: STATSD_HOST
              value: "localhost"
            - name: STATSD_PORT
              value: "9125"
            - name: REDIS_AUTH
              value: {{ .Values.main_app.ratelimiter.redis_pass }}
          volumeMounts:
            - name: {{ .Release.Name }}-ratelimit-config
              mountPath: /etc/ratelimit/config.yaml
              subPath: config.yaml
              readOnly: true
          resources:
            requests:
{{ toYaml .Values.main_app.ratelimiter.requests | indent 14 }}
            limits:
{{ toYaml .Values.main_app.ratelimiter.limits | indent 14 }}
{{- include "base.helper.restrictedSecurityContext" . | indent 10 }}
{{- end }}
      volumes:
        - name: {{ .Release.Name }}-base-config
          configMap:
            name: {{ template "base.name.release" . }}-base-config
        {{- if .Values.monitoring.enabled }}
        - name: {{ .Release.Name }}-metrics-exporter
          configMap:
            name: {{ template "base.name.release" . }}-metrics-config
        {{- end }}
        {{- if .Values.nutcracker.enabled }}
        - name: {{ .Release.Name }}-nutcracker-config
          configMap:
            name: {{ template "base.name.release" . }}-nutcracker-config
        {{- end }}
        {{- if .Values.main_app.ratelimiter }}
        - name: {{ .Release.Name }}-ratelimit-config
          configMap:
            name: {{ template "base.name.release" . }}-ratelimit-config
        {{- end }}
        {{- if .Values.main_app.jwt.enabled }}
        - name: {{ .Release.Name }}-jwt-config
          configMap:
            name: {{ template "base.name.release" . }}-jwt-config
        {{- end }}
        {{- if .Values.mesh.enabled }}
        - name: {{ .Release.Name }}-tls-certs-volume
        {{- if (.Values.mesh.certmanager | default dict).enabled }}
          secret:
            secretName: {{ template "base.name.release" . }}-tls-proxy-certs
        {{- else }}
          configMap:
            name: {{ template "base.name.release" . }}-tls-proxy-certs
        {{- end }}{{- /* end if (.Values.mesh.certmanager | default dict).enabled */ -}}
        {{- end }}
{{- with .Values.main_app.volumes }}
{{ toYaml . | indent 8 }}
{{- end }}
