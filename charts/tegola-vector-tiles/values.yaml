helm_scaffold_version: 0.2
docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent
resources:
  replicas: 1
main_app:
  image: wikimedia/operations-software-tegola
  version: latest
  port: 8080
  args: ["serve", "--logger", "zap" ,"--config", "/etc/tegola/config.toml"]
  requests:
    cpu: 1m
    memory: 200Mi
  limits:
    cpu: 1m
    memory: 400Mi
  pregen_requests:
    cpu: 1m
    memory: 200Mi
  pregen_limits:
    cpu: 1m
    memory: 400Mi
  liveness_probe:
    tcpSocket:
      port: 8080
  readiness_probe:
    httpGet:
      path: /capabilities
      port: 8080
  # Values to connect to kartodock and the local postgres environment
  # Needs to be overriden with deployment specific details
  # NOTE: Currently only the following PostGIS hosts support the SQL queries defined in the chart
  # * maps1009.eqiad.wmnet
  # * maps2009.codfw.wmnet
  postgres:
    host: postgres-postgis
    port: 5432
    database: gis
    user: default
tileCaching:
  enabled: false
  config:
    type: "s3"  # S3 compatible API on swift
    endpoint: "thanos-swift.discovery.wmnet"  # Swift HTTP endpoint hostname
    region: "us-east-1"
    bucket: "tegola-swift-container"  # Swift container name
    basepath: "tegola-cache"  # Optional, use a directory and not top level of swift container
    force_path_style: true  # Workaround to default S3 SDK behaviour to use domain based buckets
service:
  deployment: minikube
  port:
    name: http
    targetPort: 8080
    port: 8080
    nodePort: null
config:
  public:
    TEGOLA_BROKER_URL: "kafka://kafka-hostname:9092"
    TEGOLA_QUEUE_NAME: "tegola-maps-tile-pregeneration"
    TEGOLA_PATH: "/srv/service/cmd/tegola/tegola"
    TEGOLA_CONFIG_PATH: "/etc/tegola/config.toml"
  private:
    TEGOLA_POSTGRES_PASSWORD: "secret"
    AWS_ACCESS_KEY_ID: "s3_compatible_swift_key_id"
    AWS_SECRET_ACCESS_KEY: "s3_compatible_swift_secret_access_key"
mesh:
  enabled: false
  public_port: 4105
  upstream_timeout: "180.0s"
  # To be defined in a private space
  certs:
    cert: "snakeoil"
    key: "snakeoil"
  telemetry:
    enabled: true
    port: 9361
  # Ensure the envoy admin listener is bound to a tcp port, not a UNIX socket.
  # This is required for the pregenerate-maps-tiles.sh script to work properly in the CronJob
  admin:
    bind_tcp: true
# Additional resources if we want to add a port for a debugger to connect to.
debug:
  enabled: false
  # Define here any port that you want to expose for debugging purposes
  ports: []
networkpolicy:
  egress:
    enabled: false

# Tile pregeneration runs as a cronjob.
# Every job consumes tasks from a queue in batches until no task is left.
# Each batch is consumed as input to the tegola cache command.

# Pregeneration cronjob defaults
# - Run once a day (`schedule: @midnight`)
# - Consider job failed after first retry (`backoffLimit: 1`)
# - Spawn one pod that runs the pregeneration script (`parallelism: 1`)
# - Don't spawn a new job if the previous one is still running (`concurrencyPolicy: Forbid`)
tilePregeneration:
  cronJobEnabled: false
  schedule: "@midnight"
  restartPolicy: "OnFailure"
  backoffLimit: 1
  parallelism: 1
  concurrencyPolicy: Forbid
  command:
    - "/srv/service/scripts/pregenerate-maps-tiles.sh"

app:
  port: 8080
