# -- Override the name of the chart
nameOverride: ""
# -- Override the full name of the chart
fullnameOverride: ""

###
# -- Type of the CNPG database. Available types:
# * `postgresql`
# * `postgis`
type: postgresql

###
# -- Cluster mode of operation. Available modes:
# * `standalone` - default mode. Creates new or updates an existing CNPG cluster.
# * `replica` - Creates a replica cluster from an existing CNPG cluster. # TODO
# * `recovery` - Same as standalone but creates a cluster from a backup, object store or via pg_basebackup.
mode: standalone

recovery:
  ##
  # -- Available recovery methods:
  # * `backup` - Recovers a CNPG cluster from a CNPG backup (PITR supported) Needs to be on the same cluster in the same namespace.
  # * `object_store` - Recovers a CNPG cluster from a barman object store (PITR supported).
  # * `pg_basebackup` - Recovers a CNPG cluster viaa streaming replication protocol. Useful if you want to
  #        migrate databases to CloudNativePG, even from outside Kubernetes. # TODO
  method: object_store

  ## -- Point in time recovery target. Specify one of the following:
  pitrTarget:
    # -- Time in RFC3339 format
    time: ""

  ##
  # -- Backup Recovery Method
  backupName: ""  # Name of the backup to recover from. Required if method is `backup`.

  ##
  # -- The original cluster name when used in backups. Also known as serverName.
  clusterName: ""
  # -- Overrides the provider specific default endpoint. Defaults to:
  # S3: https://s3.<region>.amazonaws.com"
  # Leave empty if using the default S3 endpoint
  endpointURL: "{{ $.Values.s3.endpoint_url }}"
  # -- Specifies a CA bundle to validate a privately signed certificate.
  endpointCA:
    # -- Creates a secret with the given value if true, otherwise uses an existing secret.
    create: true
    name: ""
    key: "ca-bundle.crt"
    value: "{{ $.Values.s3.ca_cert_bundle }}"
  # -- Overrides the provider specific default path. Defaults to:
  # S3: s3://<bucket><path>
  # Azure: https://<storageAccount>.<serviceName>.core.windows.net/<containerName><path>
  # Google: gs://<bucket><path>
  destinationPath: ""
  provider: s3
  s3:
    region: "{{ $.Values.s3.region }}"
    bucket: "{{ $.Values.s3.bucket }}"
    path: "/"
    accessKey: "{{ $.Values.s3.accessKey }}"
    secretKey: "{{ $.Values.s3.secretKey }}"
  secret:
    # -- Whether to create a secret for the backup credentials
    create: true
    # -- Name of the backup credentials secret
    name: ""


cluster:
  # -- Number of instances
  instances: 2

  # PG major version
  version: 15

  # -- Name of the container image, supporting both tags (<image>:<tag>) and digests for deterministic and repeatable deployments:
  # <image>:<tag>@sha256:<digestValue>
  imageName: "docker-registry.discovery.wmnet/repos/data-engineering/postgresql-kubernetes/postgresql"
  imageTag: override_me

  # -- Image pull policy. One of Always, Never or IfNotPresent. If not defined, it defaults to IfNotPresent. Cannot be updated.
  # More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
  imagePullPolicy: IfNotPresent

  # -- The list of pull secrets to be used to pull the images.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-LocalObjectReference
  imagePullSecrets: []

  storage:
    size: 5Gi
    storageClass: "ceph-rbd-ssd"

  walStorage:
    # See full reasoning in T375846 but TLDR, this should give us 3 days of s3 being down until
    # the WAL volume fills up.
    size: 15Gi
    storageClass: "ceph-rbd-ssd"

  # -- The UID of the postgres user inside the image, cf https://gitlab.wikimedia.org/repos/data-engineering/postgresql-kubernetes/-/blob/main/blubber-postgresql.yaml?ref_type=heads#L16
  postgresUID: 100

  # -- The GID of the postgres user inside the image, cf https://gitlab.wikimedia.org/repos/data-engineering/postgresql-kubernetes/-/blob/main/blubber-postgresql.yaml?ref_type=heads#L17
  postgresGID: 102

  # We need to specify TMPDIR=/run because /run is a writable emptydir
  # when all the usual temporary directories belong to a R-O filesystem.
  # See https://github.com/cloudnative-pg/cloudnative-pg/issues/5420#issuecomment-2345461860
  env:
    TMPDIR: /run
    AWS_REQUEST_CHECKSUM_CALCULATION: WHEN_REQUIRED
    AWS_RESPONSE_CHECKSUM_VALIDATION: WHEN_REQUIRED

  # -- Resources requirements of every generated Pod.
  # Please refer to https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ for more information.
  # We strongly advise you use the same setting for limits and requests so that your cluster pods are given a Guaranteed QoS.
  # See: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/
  resources:
    limits:
      cpu: 2000m
      memory: 8Gi
    requests:
      cpu: 2000m
      memory: 8Gi

  priorityClassName: ""

  # -- Method to follow to upgrade the primary server during a rolling update procedure, after all replicas have been
  # successfully updated. It can be switchover (default) or in-place (restart).
  primaryUpdateMethod: switchover

  # -- Strategy to follow to upgrade the primary server during a rolling update procedure, after all replicas have been
  # successfully updated: it can be automated (unsupervised - default) or manual (supervised)
  primaryUpdateStrategy: unsupervised

  # -- The instances' log level, one of the following values: error, warning, info (default), debug, trace
  logLevel: "info"

  # -- Affinity/Anti-affinity rules for Pods.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-AffinityConfiguration
  affinity:
    enablePodAntiAffinity: true
    podAntiAffinityType: preferred
    topologyKey: topology.kubernetes.io/zone

  # -- The configuration for the CA and related certificates.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-CertificatesConfiguration
  certificates: {}

  # -- When this option is enabled, the operator will use the SuperuserSecret to update the postgres user password.
  # If the secret is not present, the operator will automatically create one.
  # When this option is disabled, the operator will ignore the SuperuserSecret content, delete it when automatically created,
  # and then blank the password of the postgres user by setting it to NULL.
  enableSuperuserAccess: true
  superuserSecret: ""

  # -- This feature enables declarative management of existing roles, as well as the creation of new roles if they are not
  # already present in the database.
  # See: https://cloudnative-pg.io/documentation/current/declarative_role_management/
  roles: []
    # - name: dante
    #   ensure: present
    #   comment: Dante Alighieri
    #   login: true
    #   superuser: false
    #   inRoles:
    #     - pg_monitor
    #     - pg_signal_backend

  monitoring:
    # -- Whether to enable monitoring
    enabled: false
    # -- Custom Prometheus metrics
    customQueries: []
      # - name: "pg_cache_hit_ratio"
      #   query: "SELECT current_database() as datname, sum(heap_blks_hit) / (sum(heap_blks_hit) + sum(heap_blks_read)) as ratio FROM pg_statio_user_tables;"
      #   metrics:
      #     - datname:
      #         usage: "LABEL"
      #         description: "Name of the database"
      #     - ratio:
      #         usage: GAUGE
      #         description: "Cache hit ratio"

  # -- Configuration of the PostgreSQL server.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-PostgresConfiguration
  postgresql: {}
    # max_connections: 300

  shared_preload_libraries: []

  # -- BootstrapInitDB is the configuration of the bootstrap process when initdb is used.
  # See: https://cloudnative-pg.io/documentation/current/bootstrap/
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-bootstrapinitdb
  initdb:
    # database: app
    # owner: "" # Defaults to the database name
    # secret: "" # Name of the secret containing the initial credentials for the owner of the user database. If empty a new secret will be created from scratch
    # postInitApplicationSQL:
    #  - CREATE EXTENSION IF NOT EXISTS vector;
    postInitApplicationSQL: []  # SQL queries executed post bootstrap in the application database
    postInitSQL: [] # SQL queries executed post bootstrap in the postgres database

  additionalLabels: {}
  annotations:
    # See https://cloudnative-pg.io/documentation/1.23/monitoring/#monitoring-instances
    prometheus.io/path: "/metrics"
    prometheus.io/port: "9187"
    # See https://wikitech.wikimedia.org/wiki/Kubernetes/Metrics
    prometheus.io/scrape: "true"


backups:
  # -- You need to configure backups manually, so backups are disabled by default.
  enabled: true

  # -- Overrides the provider specific default endpoint. Defaults to:
  # S3: https://s3.<region>.amazonaws.com"
  endpointURL: "{{ $.Values.s3.endpoint_url }}"  # Leave empty if using the default S3 endpoint
  # -- Specifies a CA bundle to validate a privately signed certificate.
  endpointCA:
    # -- Creates a secret with the given value if true, otherwise uses an existing secret.
    create: true
    name: ""
    key: "ca-bundle.crt"
    value: "{{ $.Values.s3.ca_cert_bundle }}"

  # -- Overrides the provider specific default path. Defaults to:
  # S3: s3://<bucket><path>
  # Azure: https://<storageAccount>.<serviceName>.core.windows.net/<containerName><path>
  # Google: gs://<bucket><path>
  destinationPath: ""
  provider: s3
  s3:
    region: "{{ $.Values.s3.region }}"
    bucket: "{{ $.Values.s3.bucket }}"
    path: "/"
    accessKey: "{{ $.Values.s3.accessKey }}"
    secretKey: "{{ $.Values.s3.secretKey }}"
  secret:
    # -- Whether to create a secret for the backup credentials
    create: true
    # -- Name of the backup credentials secret
    name: ""

  wal:
    # -- WAL compression method. One of `` (for no compression), `gzip`, `bzip2` or `snappy`.
    compression: gzip
    # -- Whether to instruct the storage provider to encrypt WAL files. One of `` (use the storage container default), `AES256` or `aws:kms`.
    # Note: we disable encryption for now, as it causes permissions errors with our Ceph-backed S3 bucket
    # See: https://github.com/cloudnative-pg/cloudnative-pg/issues/4291#issuecomment-2129750251
    encryption: "''"
    # -- Number of WAL files to be archived or restored in parallel.
    maxParallel: 1
  data:
    # -- Data compression method. One of `` (for no compression), `gzip`, `bzip2` or `snappy`.
    compression: gzip
    # -- Whether to instruct the storage provider to encrypt data files. One of `` (use the storage container default), `AES256` or `aws:kms`.
    # Note: we disable encryption for now, as it causes permissions errors with our Ceph-backed S3 bucket
    # See: https://github.com/cloudnative-pg/cloudnative-pg/issues/4291#issuecomment-2129750251
    encryption: "''"
    # -- Number of data files to be archived or restored in parallel.
    jobs: 2

  scheduledBackups:
    -
      # -- Scheduled backup name
      name: daily-backup
      # -- Schedule in cron format
      schedule: "0 0 0 * * *"
      # -- Backup owner reference
      backupOwnerReference: self
      # -- Backup method, can be `barmanObjectStore` (default) or `volumeSnapshot`
      method: barmanObjectStore

  # -- Retention policy for backups
  retentionPolicy: "60d"


pooler:
  # -- Whether to enable PgBouncer
  enabled: true
  # -- PgBouncer type of service to forward traffic to.
  type: rw
  # -- PgBouncer pooling mode
  poolMode: transaction
  # -- Number of PgBouncer instances
  instances: 3
  # --- Custom: pgbouncer image tag
  imageTag: override_me
  # --- Custom: pgbouncer image name
  imageName: docker-registry.discovery.wmnet/repos/data-engineering/pgbouncer

  # -- PgBouncer configuration parameters
  parameters:
    max_client_conn: "1000"
    default_pool_size: "25"
    log_connections: "0"
    log_disconnections: "0"

  monitoring:
    # -- Whether to enable monitoring
    enabled: true
    podMonitor:
        # -- Whether to enable the PodMonitor
      enabled: false

  # -- Custom PgBouncer deployment template.
  # Use to override image, specify resources, etc.
  template:
    spec:
      containers:
      - name: pgbouncer
        image: automatically_overriden_at_rendering_time

common_images:
  postgresql:
    "15": "override_me"

s3:
  accessKey: override_me
  secretKey: override_me
  region: override_me
  bucket: '{{ replace "_" "-" $.Release.Name }}.{{ $.Values.environmentName }}'
  ca_cert_bundle: override_me
  endpoint_url: override_me

external_services: {}
environmentName: override_me