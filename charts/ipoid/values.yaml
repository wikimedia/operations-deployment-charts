# Default values.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
app:
  image: repos/mediawiki/services/ipoid
  version: latest # we use latest everywhere in the defaults.
  port: 6927 # port exposed as a Service, also used by service-checker.
  command: []
  args: []
  requests:
    cpu: 100m
    memory: 200Mi
  limits:
    cpu: 1
    memory: 400Mi
  liveness_probe:
    tcpSocket:
      port: 6927
  readiness_probe:
    httpGet:
      path: /_info/
      port: 6927
  # add here any volumes to mount onto the pod. Example:
  #volumes:
  #- name: scratchdir
  #  emptyDir: {}
  # add here any mounted volumes to make accessible to the container. Example:
  #volumeMounts:
  #   - name: scratchdir # the name from your volume above
  #     mountPath: /scratch/ # where it should live in your container
monitoring:
  enabled: false
service:
  deployment: minikube
  port:
    name: http
    targetPort: 6927
    port: 6927
    nodePort: null
config:
  public: {}
  private: {} # MySQL connection details are ENV values in values.yaml in helmfile.d/ipoid
# Additional resources if we want to add a port for a debugger to connect to.
debug:
  enabled: false
  # Define here any port that you want to expose for debugging purposes
  ports: []
# Allow external traffic to reach this service via a (cluster provided) ingress controller.
# https://wikitech.wikimedia.org/wiki/Kubernetes/Ingress#Configuration_(for_service_owners)
ingress:
  enabled: false
  # By default, enabling ingress will switch the charts services from type NodePort to
  # ClusterIP. While that is fine for new services it may not be desired during transition
  # of existing ones from dedicated LVS to Ingress.
  # By setting keepNodePort to true, the services will stay of type NodePort.
  keepNodePort: false
  # Setting staging to true will use the staging domain to generate the default gateway
  # hosts. It will also ensure that default staging cergen certificates are be trusted.
  staging: false
  # gatewayHosts settings configure the hostnames this service will be reachable on.
  # By default, this will be a list like:
  # - {{ gatewayHosts.default }}.discovery.wmnet
  # - {{ gatewayHosts.default }}.svc.codfw.wmnet
  # - {{ gatewayHosts.default }}.svc.eqiad.wmnet
  #
  # And in case .Values.ingress.staging is true:
  # - {{ gatewayHosts.default }}.k8s-staging.discovery.wmnet
  gatewayHosts:
    # default will expand to {{ .Release.Namespace }} as long as it is an empty string.
    default: ""
    # disableDefaultHosts may be set to true if the service should not be reachable via
    # the gateway hosts generated by default (see above).
    disableDefaultHosts: false
    # extraFQDNs is a list of extra FQDNs this service should be reachable on.
    # It can be used to extend the gateway hosts that are generated by default.
    extraFQDNs: []
  # If you want to attach routes of this release to an existing Gateway, provide the name
  # of that gateway here in the format: <namespace>/<gateway-name>
  # This is useful if you wish to make multiple releases available from the same hostname.
  existingGatewayName: ""
  # routeHosts is a list of FQDNs the httproutes should attach to.
  # If existingGatewayName not set, this list might be empty and will default to the gateway
  # host generated according to how .Values.gatewayHosts.* is configured.
  # If existingGatewayName is set, you need to provide the FQDNs your routes should attach to.
  routeHosts: []
  # HTTPRoute routing rules. By default https://<hosts from above>/ will be routed to
  # the service without modification.
  # Docs: https://istio.io/v1.9/docs/reference/config/networking/virtual-service/#HTTPRoute
  httproutes: []
docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent
resources:
  replicas: 1
networkpolicy:
  egress:
    enabled: false
mesh:
  enabled: false
  image_version: latest
  certs:
    cert: "snakeoil"
    key: "snakeoil"
  # http keepalive timeout for incoming requests
  idle_timeout: "4.5s"
  # Port to listen to
  public_port: 4250
  local_access_log_min_code: "200"
  # Headers to add to a local request,
  # in dictionary form.
  request_headers_to_add: []
  # Timeout of a request to the local service
  upstream_timeout: "60s"
  # timeout for an idle upstream connection - 300s is the envoy default
  upstream_idle_timeout: "300s"
  # Enabling telemetry, telemetry port.
  telemetry:
    enabled: false
    port: 1667
  resources:
    requests:
      cpu: 200m
      memory: 100Mi
    limits:
      cpu: 500m
      memory: 500Mi
  tracing:
    enabled: false
    service_name: ~
# Mesh-related discovery
# TODO: move under mesh.* once we can
discovery:
  # List of listeners
  listeners: []
# Mesh related pure TCP proxies
tcp_proxy:
  listeners: []
# Should be provided by configuration management.
# See details of the structures in the comments
# In the configuration module.
services_proxy: ~
tcp_services_proxy: ~
# Cronjob definitions
# Here you can define your cronjobs
cronjobs: {}
