apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  {{- include "base.meta.metadata" (dict "Root" .) | indent 2 }}
spec:
  podSelector:
    matchLabels:
      app: {{ template "base.name.chart" . }}
      release: {{ .Release.Name }}
  policyTypes:
  {{- if .Values.networkpolicy.egress.enabled }}
    - Egress
  {{- end }}
    - Ingress
  ingress:
    - ports:
      {{- include "app.generic.networkpolicy_ingress" . | indent 6 -}}
      {{- include "mesh.networkpolicy.ingress" . | indent 6 }}
{{- if .Values.networkpolicy.egress.enabled }}
  egress:
    {{- include "base.networkpolicy.egress-basic" .Values }}
    {{- include "base.networkpolicy.egress.kafka" . | indent 4 }}
    {{- include "base.networkpolicy.egress.mariadb" . | indent 4 }}
    {{- include "base.networkpolicy.egress.zookeeper" . | indent 4 }}
    {{- include "mesh.networkpolicy.egress" . | indent 4 }}
{{- end }}


{{/*
  Enable ingress traffic to the webserver from specific airflow components.

  Note; the webserver component is listed as part of the pod selector, as it calls its own API.
*/}}
---
apiVersion: crd.projectcalico.org/v1
kind: NetworkPolicy
metadata:
  name: {{ template "base.name.release" . }}-webserver-ingress
spec:
  types:
    - Ingress
  {{- include "networkpolicy.selector.component" (dict "root" $ "components" (list "webserver" "triggerer")) | indent 2 }}
  ingress:
    - action: Allow
      protocol: TCP
      destination:
        ports:
        - {{ $.Values.app.port }}


{{- if $.Values.scheduler.enabled }}
{{/*
  Enable ingress traffic to the scheduler from specific airflow components.

  Note; the scheduler component is listed as part of the pod selector, as it calls its own API.
*/}}
---
apiVersion: crd.projectcalico.org/v1
kind: NetworkPolicy
metadata:
  name: {{ template "base.name.release" . }}-scheduler-ingress
spec:
  types:
    - Ingress
  {{- include "networkpolicy.selector.component" (dict "root" $ "components" "scheduler") | indent 2 }}
  ingress:
    - action: Allow
      protocol: TCP
      destination:
        ports:
        {{- if eq $.Values.config.airflow.config.core.executor "LocalExecutor" }}
        - {{ $.Values.scheduler.local_executor_api_port }}
        {{- end }}
        - {{ $.Values.config.airflow.config.scheduler.scheduler_health_check_server_port }}


{{- if contains "KubernetesExecutor" $.Values.config.airflow.config.core.executor }}
{{/*
  When using the Kubernetes executor, the scheduler needs to have access to the kube API
  to manage tasks via Pod resources, and the webserver needs to be able to tail the logs
  of running Pods.
*/}}
---
apiVersion: crd.projectcalico.org/v1
kind: NetworkPolicy
metadata:
  name: {{ template "base.name.release" . }}-to-kubeapi
spec:
  types:
    - Egress
  {{- include "networkpolicy.selector.component" (dict "root" $ "components" (list "scheduler" "webserver" "triggerer")) | indent 2 }}
  egress:
    - action: Allow
      destination:
        services:
          name: kubernetes
          namespace: default

{{/*
  Tasks may now be executed with the KubernetesPodOperator or the SparkKubernetesOperator.
  These task-pods need to be able to access the Kubernetes API. The operators themselves add
  a label to indicate that they were executed using this.
*/}}
---
apiVersion: crd.projectcalico.org/v1
kind: NetworkPolicy
metadata:
  name: {{ template "base.name.release" . }}-task-pods-to-kubeapi
spec:
  types:
    - Egress
  selector: "app == 'airflow' && component == 'task-pod' && kubeapi_enabled == 'True'"
  egress:
    - action: Allow
      destination:
        services:
          name: kubernetes
          namespace: default
{{- end }}
{{- end }}
{{/*
== NetworkPolicy resources associated with external (aka not running in Kubernetes) services.

These resources are scoped to a particular airflow component (scheduler, webserver, etc)

*/}}
{{- if $.Values.external_services }}
{{- range $component, $externalServices := $.Values.external_services }}
---
apiVersion: crd.projectcalico.org/v1
kind: NetworkPolicy
metadata:
  name: {{ template "base.meta.name" (dict "Root" $) }}-egress-external-services-{{ $component }}
  {{- include "base.meta.labels" $ | indent 2 }}
  namespace: {{ $.Release.Namespace }}
spec:
  selector: "app == '{{ template "base.name.chart" $ }}' && release == '{{ $.Release.Name }}' && component == '{{ $component }}'"
  types:
  - Egress
  egress:
    {{- range $serviceType, $serviceNames := $externalServices }}
    {{- if $serviceNames }}
    {{- range $serviceName := $serviceNames }}
    - action: Allow
      destination:
        services:
          name: {{ $serviceType }}-{{ $serviceName }}
          namespace: external-services
    {{- end }}
    {{- end }}
    {{- end }}
{{- end }}
{{- end }}


{{- if $.Values.mesh.enabled }}
{{/* This networkpolicy allows ingress on the envoy pod for every port associated with the registered discovery listeners */}}
{{- if .Values.discovery | default false }}
{{- if .Values.discovery.listeners | default false }}
---
apiVersion: crd.projectcalico.org/v1
kind: NetworkPolicy
metadata:
  name: {{ template "base.name.release" . }}-envoy-ingress
spec:
  types:
    - Ingress
  {{- include "networkpolicy.selector.component" (dict "root" $ "components" "envoy") | indent 2 }}
  ingress:
  - action: Allow
    protocol: TCP
    destination:
      ports:
      {{- range $name := .Values.discovery.listeners }}
      {{- $listener := index $.Values.services_proxy $name }}
      - {{ $listener.port }}
      {{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- if $.Values.monitoring.enabled }}
{{/* Allow incoming traffic on statsd and prometheus ports to reach the statsd component. */}}
---
apiVersion: crd.projectcalico.org/v1
kind: NetworkPolicy
metadata:
  name: {{ template "base.name.release" . }}-statsd-ingress
spec:
  types:
    - Ingress
  {{- include "networkpolicy.selector.component" (dict "root" $ "components" "statsd") | indent 2 }}
  ingress:
  - action: Allow
    protocol: TCP
    destination:
      ports:
      - {{ $.Values.monitoring.prometheus_port }}
      - {{ $.Values.monitoring.statsd.port }}
  - action: Allow
    protocol: UDP
    destination:
      ports:
      - {{ $.Values.monitoring.statsd.port }}

{{- end }}
