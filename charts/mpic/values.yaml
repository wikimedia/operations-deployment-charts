# Default values.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
app:
  image: repos/data-engineering/mpic
  version: latest # we use latest everywhere in the defaults.
  port: 8080 # port exposed as a Service, also used by service-checker.
  # Use command and args below to override the entrypoint. Type is arrays
  # Not necessary unless you want to change the entrypoint defined in the docker image
  # Example:
  # command: ["node"]
  # args: ["bin/server.js", "--param1", "arg1"]
  command: ["node"]
  args: ["server.js", "--config", "/etc/mpic/config.yaml"]
  requests:
    cpu: 100m # Just some sample, edit these - 100m is the minimum for deployment
    memory: 200Mi # Just some sample, edit these
  limits:
    cpu: 1 # Just some sample, edit these
    memory: 400Mi # Just some sample, edit these
  liveness_probe:
    tcpSocket:
      port: 8080
  readiness_probe:
    httpGet:
      path: /
      port: 8080
  # add here any volumes to mount onto the pod. Example:
  #volumes:
  #- name: scratchdir
  #  emptyDir: {}
  # add here any mounted volumes to make accessible to the container. Example:
  #volumeMounts:
  #   - name: scratchdir # the name from your volume above
  #     mountPath: /scratch/ # where it should live in your container

  volumes:
    - name: config-volume
      configMap:
        name: mpic-base-config
  volumeMounts:
    - name: config-volume
      mountPath: /etc/mpic/

  logging:
    level: trace

  service:
    name: mpic
    port: 8080
    cors: "*"
    max_body_size: 100kb
    secure_cookie: true

  listeners:
    action_api_basepath: http://127.0.0.1:6500

  database:
    engine: mysql
    host: localhost
    database: mpic
    username: mpic
    port: 3306

  idp:
    oidc_url: https://idp-test.wikimedia.org/oidc
    client_id: mpic_next
    redirect_uri: http://mpic-next.wikimedia.org/login/callback
    response_type: code

monitoring:
  # If enabled is true, monitoring annotations will be added to the deployment.
  enabled: false

service:
  deployment: minikube # valid values are "production" and "minikube"
  port:
    name: http # a unique name of lowercase alphanumeric characters or "-", starting and ending with alphanumeric, max length 63
    # protocol: TCP # TCP is the default protocol
    targetPort: 8080 # the number or name of the exposed port on the container
    port: 8080 # the number of the port desired to be exposed to the cluster
    nodePort: null # you need to define this if "production" is used. In minikube environments let it autoallocate

config:
  public: {} # Add here all the keys that can be publicly available as a ConfigMap
  private:  # Add here all the keys that should be private but still available as env variables
    database_password: "dbpassvalue"
    idp_client_secret: "idpclientsecret"
    session_secret: "sessionsecret"
    csrf_secret: "csrfsecret"

# Additional resources if we want to add a port for a debugger to connect to.
debug:
  enabled: false
  # Define here any port that you want to expose for debugging purposes
  ports: []

# Allow external traffic to reach this service via a (cluster provided) ingress controller.
# https://wikitech.wikimedia.org/wiki/Kubernetes/Ingress#Configuration_(for_service_owners)
ingress:
  enabled: true
  # By default, enabling ingress will switch the charts services from type NodePort to
  # ClusterIP. While that is fine for new services it may not be desired during transition
  # of existing ones from dedicated LVS to Ingress.
  # By setting keepNodePort to true, the services will stay of type NodePort.
  keepNodePort: false
  # gatewayHosts settings configure the hostnames this service will be reachable on.
  # By default, this will be a list like:
  # - {{ gatewayHosts.default }}.{{ domain }}
  # For all domains listed in .gatewayHosts.domains (specified by SRE for each environment)
  gatewayHosts:
    # default will expand to {{ .Release.Namespace }} as long as it is an empty string.
    default: ""
    # disableDefaultHosts may be set to true if the service should not be reachable via
    # the gateway hosts generated by default (see above).
    disableDefaultHosts: false
    # extraFQDNs is a list of extra FQDNs this service should be reachable on.
    # It can be used to extend the gateway hosts that are generated by default.
    extraFQDNs: []
  # If you want to attach routes of this release to an existing Gateway, provide the name
  # of that gateway here in the format: <namespace>/<gateway-name>
  # This is useful if you wish to make multiple releases available from the same hostname.
  existingGatewayName: ""
  # routeHosts is a list of FQDNs the httproutes should attach to.
  # If existingGatewayName not set, this list might be empty and will default to the gateway
  # host generated according to how .Values.gatewayHosts.* is configured.
  # If existingGatewayName is set, you need to provide the FQDNs your routes should attach to.
  routeHosts: []
  # HTTPRoute routing rules. By default https://<hosts from above>/ will be routed to
  # the service without modification.
  # Docs: https://istio.io/v1.9/docs/reference/config/networking/virtual-service/#HTTPRoute
  httproutes: []
  # Base CORS HTTP headers for the general use case.
  base_cors_policy: false
  # Add a custom CORS policy, injecting an Istio CorsPolicy config:
  # https://istio.io/latest/docs/reference/config/networking/virtual-service/#CorsPolicy
  # Takes precedence over base_cors_policy.
  custom_cors_policy: {}

# Basic mesh-related data.
mesh:
  enabled: true
  admin: {port: 1666 }
  image_version: latest
  # http keepalive timeout for incoming requests
  idle_timeout: "4.5s"
  # Port to listen to
  public_port: 8000
  local_access_log_min_code: "200"
  # Headers to add to a local request,
  # in dictionary form.
  request_headers_to_add: []
  # Timeout of a request to the local service
  upstream_timeout: "60s"
  # Enabling telemetry, telemetry port.
  telemetry:
    enabled: true
    port: 1667
  resources:
    requests:
      cpu: 200m
      memory: 100Mi
    limits:
      cpu: 500m
      memory: 500Mi

# Mesh-related discovery
# TODO: move under mesh.* once we can
discovery:
  # List of listeners
  listeners: []

# Mesh related pure TCP proxies
tcp_proxy:
  listeners: []

# Should be provided by configuration management.
# See details of the structures in the comments
# In the configuration module.
services_proxy: ~
tcp_services_proxy: ~

docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent
resources:
  replicas: 1

# enable egress traffic to the database
networkpolicy:
  egress:
    enabled: true
    dst_nets:
      - cidr: 10.64.138.8/32  # an-mariadb1001.eqiad.wmnet
        ports:
        - protocol: TCP
          port: 3306
      - cidr: 10.64.142.7/32  # an-mariadb1002.eqiad.wmnet
        ports:
        - protocol: TCP
          port: 3306

# Add here the list of kafka-clusters (by name) that the service will need to reach.
kafka:
  allowed_clusters: []

# Optional affinity settings
affinity: {}
#  affinity:
#    nodeAffinity:
#      requiredDuringSchedulingIgnoredDuringExecution:
#        nodeSelectorTerms:
#          - matchExpressions:
#              - key: some-key
#                operator: In
#                values:
#                  - some-value
#  nodeSelector:
#    node.kubernetes.io/some-key: some-value

# Cronjob definitions
# Here you can define your cronjobs
cronjobs: []
# Example of a job:
# - name: my-cron-hourly
#   enabled: true
#   command:
#      - /bin/cowsay
#      - "hello"
#   schedule: "@hourly" (defaults to @daily)
#   concurrency: Replace (defaults to "Forbid")
#   image_versioned: my-app:1.1.1 (defaults to the app used in the main application definition)
#   resources: (optional list of requests/limits for our cronjob; if not present will default to the application ones.)

# The set of external services to allow egress to
# Example:
# kafka:
# - main-codfw
# - main-eqiad
# presto:
# - analytics
#
# See https://wikitech.wikimedia.org/wiki/Kubernetes/Deployment_Charts#Enabling_egress_to_services_external_to_Kubernetes
# for the list of supported services
external_services: {}
