# Default values for mobileapps.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
helm_scaffold_version: 0.2 # This can be useful when backporting fixes.
docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent
resources:
  replicas: 1
main_app:
  image: wikimedia/mediawiki-services-mobileapps
  version: latest # we use latest everywhere in the defaults.
  port: 8888 # port exposed as a Service, also used by service-checker.
  # Use command and args below to override the entrypoint. Type is arrays
  # Not necessary unless you want to change the entrypoint defined in the docker image
  # Example:
  # command: ["node"]
  # args: ["bin/server.js", "--param1", "arg1"]
  command: ["nodejs"]
  args: ["server.js", "-c", "/etc/mobileapps/config.yaml"]
  # See T218733#5850025 for derivation of 'requests' and 'limits' values
  requests:
    cpu: 1
    memory: 350Mi
  limits:
    cpu: 1200m
    memory: 600Mi
  liveness_probe:
    tcpSocket:
      port: 8888
  readiness_probe:
    httpGet:
      path: /_info
      port: 8888
  mwapi_uri: https://api-rw.discovery.wmnet/w/api.php
  mwrestapi_uri: https://api-rw.discovery.wmnet/w/rest.php
  restbase_uri: https://restbase.discovery.wmnet:7443
  mw_resource_loader_uri: https://api-rw.discovery.wmnet/w/load.php
  eventgate_uri: https://eventgate-main.discovery.wmnet:4492/v1/events
  mobile_html_rest_api_base_uri: //meta.wikimedia.org/api/rest_v1/
  mobile_html_csp: "default-src 'none';
    connect-src app://*.wikipedia.org https://*.wikipedia.org;
    media-src app://upload.wikimedia.org https://upload.wikimedia.org 'self';
    img-src app://*.wikimedia.org https://*.wikimedia.org app://wikimedia.org https://wikimedia.org 'self' data:;
    object-src 'none';
    script-src app://meta.wikimedia.org https://meta.wikimedia.org 'unsafe-inline';
    style-src app://meta.wikimedia.org https://meta.wikimedia.org app://*.wikipedia.org https://*.wikipedia.org 'self' 'unsafe-inline';
    frame-ancestors 'self'
    "
  use_coreparsoid_endpoint: false
  caching:
    enabled: false
    excludedUserAgents: []
    event:
      stream:
        change: resource_change
        purge: resource-purge

logging:
  level: warn

monitoring:
  enabled: false
  image_version: latest
  prometheus:
    port: 9402

service:
  deployment: minikube # valid values are "production" and "minikube"
  port:
    name: http # a unique name of lowercase alphanumeric characters or "-", starting and ending with alphanumeric, max length 63
    # protocol: TCP # TCP is the default protocol
    targetPort: 8888 # the number or name of the exposed port on the container
    port: 8888 # the number of the port desired to be exposed to the cluster
    nodePort: null # you need to define this if "production" is used. In minikube environments let it autoallocate
config:
  public: {} # Add here all the keys that can be publicly available as a ConfigMap
  private: {} # Add here all the keys that should be private but still available as env variables

mesh:
  enabled: false # Switch to true in production
  image_version: 1.13.1-2
  public_port: 4888 # the port where TLS will be exposed
  upstream_timeout: "180.0s"
  # To be defined in a private space
  certs:
    cert: "snakeoil"
    key: "snakeoil"
  # Enable telemetry
  telemetry:
    enabled: true
    port: 9361
# Add here, via our "secret" system, the cert/key pairs
#    cert: "your cert here"
#    key: "your key here"

datastore:
  cassandra_client:
    enabled: false
    port: 9042
    consistency: localQuorum
    hosts: []
    local_dc: eqiad
    authentication:
      username: cassandra
      password: foobarbaz
    tls:
      ca: /etc/ssl/certs/wmf-ca-certificates.crt

# Additional resources if we want to add a port for a debugger to connect to.
debug:
  enabled: false
  # Define here any port that you want to expose for debugging purposes
  ports: []

networkpolicy:
  egress:
    enabled: false

app:
  port: 8888
