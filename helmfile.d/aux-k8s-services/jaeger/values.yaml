tag: &tag '1.63.0-1'
provisionDataStore:
  cassandra: false
  elasticsearch: false
  kafka: false
agent:
  enabled: false
spark:
  enabled: false
storage:
  type: elasticsearch
  elasticsearch:
    host: 'logs-api.svc.eqiad.wmnet'
    port: 443
    scheme: https
    user: 'jaeger-prod'
    archive: true
networkPolicy:
  enabled: true

query:
  image:
    registry: docker-registry.discovery.wmnet
    repository: jaeger-query
    tag: *tag
  _ui_config:
    archiveEnabled: true
    linkPatterns:
      - type: tags
        key: "guid:x-request-id"
        text: Logs
        # TODO: this might work if we can format the times correctly for kibana?
        # _g=(time:(from:'#{trace.startTime}||-1h',to:'#{trace.startTime}||+1h'))
        url: "https://logstash.wikimedia.org/app/dashboards#/view/x-debug?_g=(time:(from:now-1h,mode:quick,to:now))&_a=(query:(query_string:(query:%27reqId:%22#{guid:x-request-id}%22%27)))"
  config: "{{ .Values.query._ui_config | mustToPrettyJson }}"
  cmdlineParams:
    es.tls.enabled: true
    es.index-date-separator: '.'
    es.num-replicas: 2
    es.num-shards: 1
    es.max-span-age: 756h0m0s  # 4.5 weeks
    es.tags-as-fields.all: true
    es-archive.enabled: true
    es-archive.tls.enabled: true
    es-archive.index-date-separator: '.'
    es-archive.num-replicas: 2
    es-archive.num-shards: 1
    es-archive.tags-as-fields.all: true
  replicaCount: 2
  resources:
    limits:
      cpu: 2
      memory: 3Gi
  agentSidecar:
    enabled: false
  serviceAccount:
    create: false
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "16687"
  service:
    # query.service.port is 80 by default which makes it confusing if tls is enabled.
    # jaeger-query is listening on 16686 by default so we can as well use that as
    # service port to make it less confusing.
    port: 16686
  oAuthSidecar:
    enabled: true
    resources:
      limits:
        cpu: 1
    image:
      registry: docker-registry.discovery.wmnet
      repository: oauth2-proxy
      tag: 7.5.1-1-20240908
    extraSecretMounts:
      - name: tls
        mountPath: /tls
        subPath: ""
        secretName: main-jaeger-query
        readOnly: true
    extraEnv:
      - name: OAUTH2_PROXY_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            name: oauth2-proxy
            key: client-secret-key
      - name: OAUTH2_PROXY_COOKIE_SECRET
        valueFrom:
          secretKeyRef:
            name: oauth2-proxy
            key: cookie-secret-key
    config: |-
      provider = "oidc"
      https_address = ":4180"
      upstreams = ["http://localhost:16686"]
      client_id = "jaeger"
      redirect_url = "https://trace.wikimedia.org/oauth2/callback"
      cookie_domains = "trace.wikimedia.org"
      oidc_issuer_url = "https://idp.wikimedia.org/oidc"
      cookie_secure = "true"
      email_domains = "*"
      skip_provider_button = "true"
      code_challenge_method = "plain"
      tls_cert_file = "/tls/tls.crt"
      tls_key_file = "/tls/tls.key"
      ssl_upstream_insecure_skip_verify = true
  networkPolicy:
    enabled: true
    ingressRules:
      customRules:
        - from:
            # Allow ingress from ingressgateway to the default http port
            - namespaceSelector:
                matchLabels:
                  kubernetes.io/metadata.name: istio-system
              podSelector:
                matchLabels:
                  istio: ingressgateway
          ports:
            - port: 16686
              protocol: TCP
            - port: 4180
              protocol: TCP
        # Allow ingress from everywhere to the admin port
        # FIXME: This should be limited to prometheus nodes and kubelets
        # FIXME: admin port sounds evil, I could not find docs
        #        on what is running there apart from health check
        #        and monitoring.
        - ports:
            - port: 16687
              protocol: TCP

    egressRules:
      # Allow egress to logs-api.svc.eqiad.wmnet
      customRules:
      - to:
        - ipBlock:
            cidr: 10.2.2.79/32
        ports:
        - protocol: TCP
          port: 443
      # Allow egress to idp
      # TODO: move to use the external-services chart
      - to:
        - ipBlock:
            cidr: 208.80.154.80/32
        - ipBlock:
            cidr: 2620:0:861:3:208:80:154:80/128
        - ipBlock:
            cidr: 208.80.154.7/32 # idp1004
        - ipBlock:
            cidr: 2620:0:861:1:208:80:154:7/128 # idp1004
        - ipBlock:
            cidr: 208.80.155.104/32 # idp1005
        - ipBlock:
            cidr: 2620:0:861:4:208:80:155:104/128 # idp1005
        - ipBlock:
            cidr: 208.80.153.12/32
        - ipBlock:
            cidr: 2620:0:860:1:208:80:153:12/128
        - ipBlock:
            cidr: 208.80.153.40/32 # idp2004
        - ipBlock:
            cidr: 2620:0:860:2:208:80:153:40/128 # idp2004
        - ipBlock:
            cidr: 208.80.153.77/32 # idp2005
        - ipBlock:
            cidr: 2620:0:860:3:208:80:153:77/128 # idp2005
        ports:
        - protocol: TCP
          port: 443
  extraSecretMounts:
    - name: jaeger-tls
      mountPath: /tls
      subPath: ""
      # The secret name is static as is is not templateable.
      # There must be a Certificate specified in extraObjects that creates a secret with this name.
      secretName: main-jaeger-query
      readOnly: true

collector:
  image:
    registry: docker-registry.discovery.wmnet
    repository: jaeger-collector
    tag: *tag
  cmdlineParams:
    es.tls.enabled: true
    es.index-date-separator: '.'
    es.num-replicas: 2
    es.num-shards: 1
    es.tags-as-fields.all: true
    # Enabling TLS for all ports exposed by default (although we only use the otlp ones)
    collector.http.tls.enabled: true
    collector.http.tls.key: /tls/tls.key
    collector.http.tls.cert: /tls/tls.crt
    collector.grpc.tls.enabled: true
    collector.grpc.tls.key: /tls/tls.key
    collector.grpc.tls.cert: /tls/tls.crt
    collector.otlp.http.tls.enabled: true
    collector.otlp.http.tls.key: /tls/tls.key
    collector.otlp.http.tls.cert: /tls/tls.crt
    collector.otlp.grpc.tls.enabled: true
    collector.otlp.grpc.tls.key: /tls/tls.key
    collector.otlp.grpc.tls.cert: /tls/tls.crt
  resources:
    limits:
      cpu: 2
      memory: 1Gi
  serviceAccount:
    create: false
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "14269"
  service:
    grpc: {}
    http: {}
    zipkin: {}
    otlp:
      grpc:
        name: otlp-grpc
        port: 4317
      http:
        name: otlp-http
        port: 4318
  networkPolicy:
    enabled: true
    ingressRules:
      customRules:
        - from:
            # Allow ingress from ingressgateway to the default http port
            - namespaceSelector:
                matchLabels:
                  kubernetes.io/metadata.name: istio-system
              podSelector:
                matchLabels:
                  istio: ingressgateway
          ports:
            # OTLP GRPC
            - protocol: TCP
              port: 4317
            # OTLP HTTP
            - protocol: TCP
              port: 4318
        # Allow ingress from everywhere to the admin port
        # FIXME: This should be limited to prometheus nodes and kubelets
        # FIXME: admin port sounds evil, I could not find docs
        #        on what is running there apart from health check
        #        and monitoring.
        - ports:
            - port: 14269
              protocol: TCP
    egressRules:
      # Allow egress to logs-api.svc.eqiad.wmnet
      customRules:
      - to:
        - ipBlock:
            cidr: 10.2.2.79/32
        ports:
        - protocol: TCP
          port: 443
  extraSecretMounts:
    - name: jaeger-tls
      mountPath: /tls
      subPath: ""
      # The secret name is static as is is not templateable.
      # There must be a Certificate specified in extraObjects that creates a secret with this name.
      secretName: main-jaeger-collector
      readOnly: true

esIndexCleaner:
  enabled: false
  image:
    registry: docker-registry.discovery.wmnet
    repository: jaeger-es-index-cleaner
    tag: *tag
  serviceAccount:
    create: false
  # Number of days to keep trace data, before deleting
  numberOfDays: 30
  # Run the cleaner once a day after midnight
  # as a new index will probably be created at ~00:00
  schedule: "42 0 * * *"
  cmdlineParams:
    es.tls.enabled: true
    index-date-separator: '.'
  networkPolicy:
    enabled: true
    egressRules:
      # Allow egress to logs-api.svc.eqiad.wmnet
      customRules:
      - to:
        - ipBlock:
            cidr: 10.2.2.79/32
        ports:
        - protocol: TCP
          port: 443

# Array with extra yaml objects to install alongside the chart. Values are evaluated as a template.
extraObjects:
  - apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: main-jaeger-query
    spec:
      secretName: main-jaeger-query
      commonName: "{{ template \"jaeger.query.name\" . }}.{{ .Release.Namespace }}.svc"
      dnsNames:
        - "{{ template \"jaeger.query.name\" . }}.{{ .Release.Namespace }}.svc"
        - "{{ template \"jaeger.query.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
      issuerRef:
        name: discovery
        group: cfssl-issuer.wikimedia.org
        kind: ClusterIssuer
  - apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: main-jaeger-collector
    spec:
      secretName: main-jaeger-collector
      commonName: "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc"
      dnsNames:
        - "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc"
        - "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
      issuerRef:
        name: discovery
        group: cfssl-issuer.wikimedia.org
        kind: ClusterIssuer
  # Istio Gateway used by query and collector
  - apiVersion: networking.istio.io/v1beta1
    kind: Gateway
    metadata:
      name: "{{ .Release.Name }}"
    spec:
      selector:
        istio: ingressgateway
      servers:
      - hosts:
          - jaeger-query.discovery.wmnet
          - jaeger-query.svc.codfw.wmnet
          - jaeger-query.svc.eqiad.wmnet
          - trace.wikimedia.org
          - jaeger-collector-http.discovery.wmnet
          - jaeger-collector-http.svc.codfw.wmnet
          - jaeger-collector-http.svc.eqiad.wmnet
          - jaeger-collector-grpc.discovery.wmnet
          - jaeger-collector-grpc.svc.codfw.wmnet
          - jaeger-collector-grpc.svc.eqiad.wmnet
        port:
          name: https
          number: 443
          protocol: HTTPS
        tls:
          credentialName: jaeger-tls-certificate
          mode: SIMPLE
  # Ingress config for query
  - apiVersion: networking.istio.io/v1beta1
    kind: VirtualService
    metadata:
      name: "{{ template \"jaeger.query.name\" . }}"
    spec:
      gateways:
        - "{{ .Release.Name }}"
      hosts:
        - jaeger-query.discovery.wmnet
        - jaeger-query.svc.codfw.wmnet
        - jaeger-query.svc.eqiad.wmnet
        - trace.wikimedia.org
      http:
      - name: default-route
        route:
        - destination:
            host: "{{ template \"jaeger.query.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
            port:
              number: 16686
  - apiVersion: networking.istio.io/v1beta1
    kind: DestinationRule
    metadata:
      name: "{{ template \"jaeger.query.name\" . }}"
    spec:
      host: "{{ template \"jaeger.query.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
      trafficPolicy:
        tls:
          mode: SIMPLE
          # The ingressgateway will verify that the upstreams certificate SAN matches one of(!)
          # the subjectAltNames provided here.
          subjectAltNames:
            - jaeger-query.discovery.wmnet
            - jaeger-query.svc.codfw.wmnet
            - jaeger-query.svc.eqiad.wmnet
  # Ingress config for collector
  - apiVersion: networking.istio.io/v1beta1
    kind: VirtualService
    metadata:
      name: "{{ template \"jaeger.collector.name\" . }}-http"
    spec:
      gateways:
        - "{{ .Release.Name }}"
      hosts:
        - jaeger-collector-http.discovery.wmnet
        - jaeger-collector-http.svc.codfw.wmnet
        - jaeger-collector-http.svc.eqiad.wmnet
      http:
      - name: default-route
        route:
        - destination:
            host: "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
            port:
              number: 4318
  - apiVersion: networking.istio.io/v1beta1
    kind: VirtualService
    metadata:
      name: "{{ template \"jaeger.collector.name\" . }}-grpc"
    spec:
      gateways:
        - "{{ .Release.Name }}"
      hosts:
        - jaeger-collector-grpc.discovery.wmnet
        - jaeger-collector-grpc.svc.codfw.wmnet
        - jaeger-collector-grpc.svc.eqiad.wmnet
      http:
      - name: default-route
        route:
        - destination:
            host: "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
            port:
              number: 4317
  - apiVersion: networking.istio.io/v1beta1
    kind: DestinationRule
    metadata:
      name: "{{ template \"jaeger.collector.name\" . }}"
    spec:
      host: "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
      trafficPolicy:
        connectionPool:
          http:
            # The istio gateway will forward all incoming HTTP requests using HTTP/1.1 regardless
            # of the protocol the client used. The following option instructs the gateway to forward
            # requests using the same protocol as the incoming request.
            # As the gateway will always advertize HTTP/1.1 and HTTP/2, this will break if the backend
            # does not support HTTP/2.
            useClientProtocol: true
        tls:
          mode: SIMPLE
          subjectAltNames:
            - jaeger-collector-http.discovery.wmnet
            - jaeger-collector-http.svc.codfw.wmnet
            - jaeger-collector-http.svc.eqiad.wmnet
            - jaeger-collector-grpc.discovery.wmnet
            - jaeger-collector-grpc.svc.codfw.wmnet
            - jaeger-collector-grpc.svc.eqiad.wmnet
