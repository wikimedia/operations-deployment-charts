releases:
  - name: pod-security-policies
    chart: wmf-stable/raw
    namespace: kube-system
    values:
      - resources:
        - apiVersion: policy/v1beta1
          kind: PodSecurityPolicy
          metadata:
            name: privileged
            annotations:
              seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
          spec:
            privileged: true
            allowPrivilegeEscalation: true
            allowedCapabilities: ['*']
            volumes: ['*']
            hostNetwork: true
            hostPorts:
              - min: 0
                max: 65535
            hostIPC: true
            hostPID: true
            runAsUser:
              rule: 'RunAsAny'
            seLinux:
              rule: 'RunAsAny'
            supplementalGroups:
              rule: 'RunAsAny'
            fsGroup:
              rule: 'RunAsAny'
        - apiVersion: policy/v1beta1
          kind: PodSecurityPolicy
          metadata:
            name: restricted
            annotations:
              {{- if not ($.Environment.Values.PodSecurityStandard | get "disablePSPMutations" false) }}
              apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default,localhost/wikifunctions-orchestrator,localhost/wikifunctions-evaluator'
              seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
              seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'
              apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
              {{- else }}
              # During migration we need to allow all seccomp profiles as the PSP can not
              # properly validate the securityContext.seccompProfile.type field.
              # Disabling the validation (e.g. not setting this annotation) will cause the PSP
              # to reject pods with a seccomp profile set.
              seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
              {{- end }}
          spec:
            privileged: false
            # Required to prevent escalations to root.
            allowPrivilegeEscalation: false
            # This is redundant with non-root + disallow privilege escalation,
            # but we can provide it for defense in depth.
            requiredDropCapabilities:
              - ALL
            # Allow core volume types.
            volumes:
              - 'configMap'
              - 'emptyDir'
              - 'projected'
              - 'secret'
              - 'downwardAPI'
              # Assume that persistentVolumes set up by the cluster admin are safe to use.
              - 'persistentVolumeClaim'
            hostNetwork: false
            hostIPC: false
            hostPID: false
            runAsUser:
              # Require the container to run without root privileges.
              rule: 'MustRunAsNonRoot'
            seLinux:
              # This policy assumes the nodes are using AppArmor rather than SELinux.
              rule: 'RunAsAny'
            supplementalGroups:
              rule: 'MustRunAs'
              ranges:
                # Forbid adding the root group.
                - min: 1
                  max: 65535
            fsGroup:
              rule: 'MustRunAs'
              ranges:
                # Forbid adding the root group.
                - min: 1
                  max: 65535
            readOnlyRootFilesystem: false
        # The mediawiki PSP is the restricted PSP with some additional grants needed for mediawiki
        - apiVersion: policy/v1beta1
          kind: PodSecurityPolicy
          metadata:
            name: mediawiki
            annotations:
              {{- if not ($.Environment.Values.PodSecurityStandard | get "disablePSPMutations" false) }}
              seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'
              apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
              seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
              apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
              {{- else }}
              # During migration we need to allow all seccomp profiles as the PSP can not
              # properly validate the securityContext.seccompProfile.type field.
              # Disabling the validation (e.g. not setting this annotation) will cause the PSP
              # to reject pods with a seccomp profile set.
              seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
              {{- end }}
          spec:
            privileged: false
            # Required to prevent escalations to root.
            allowPrivilegeEscalation: false
            allowedCapabilities:
              - SYS_PTRACE
            # This is redundant with non-root + disallow privilege escalation,
            # but we can provide it for defense in depth.
            requiredDropCapabilities:
              - ALL
            # Allow core volume types and specific hostPaths. We are adding /srv/mediawiki solely 
            # for mw-experimental. Since psp will be superseded, we will not create a new PSP,
            # but rather update the existing one.
            allowedHostPaths:
              - pathPrefix: /usr/share/GeoIP
                readOnly: true
              - pathPrefix: /usr/share/GeoIPInfo
                readOnly: true
              - pathPrefix: /srv/mediawiki
                readOnly: true
            volumes:
              - 'configMap'
              - 'emptyDir'
              - 'projected'
              - 'secret'
              - 'downwardAPI'
              # Assume that persistentVolumes set up by the cluster admin are safe to use.
              - 'persistentVolumeClaim'
              - 'hostPath'
            hostNetwork: false
            hostIPC: false
            hostPID: false
            runAsUser:
              # Require the container to run without root privileges.
              rule: 'MustRunAsNonRoot'
            seLinux:
              # This policy assumes the nodes are using AppArmor rather than SELinux.
              rule: 'RunAsAny'
            supplementalGroups:
              rule: 'MustRunAs'
              ranges:
                # Forbid adding the root group.
                - min: 1
                  max: 65535
            fsGroup:
              rule: 'MustRunAs'
              ranges:
                # Forbid adding the root group.
                - min: 1
                  max: 65535
            readOnlyRootFilesystem: false
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: allow-privileged-psp
          rules:
            - apiGroups: ['policy']
              resources: ['podsecuritypolicies']
              verbs:     ['use']
              resourceNames:
                - privileged
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: allow-restricted-psp
          rules:
            - apiGroups: ['policy']
              resources: ['podsecuritypolicies']
              verbs:     ['use']
              resourceNames:
                - restricted
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: allow-mediawiki-psp
          rules:
            - apiGroups: ['policy']
              resources: ['podsecuritypolicies']
              verbs:     ['use']
              resourceNames:
                - mediawiki
