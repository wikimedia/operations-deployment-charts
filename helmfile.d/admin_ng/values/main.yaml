# cluster_group is used to identify a group of similar clusters (like for one
# in eqiad and one in codfw) that share some config (values) in
# "admin_ng/values/<cluster_group>.yaml"
cluster_group: main

# Configure the default PodSecurityStandard settings, see: T273507
PodSecurityStandard:
  disablePSPMutations: true
  enforce: true # Enforce the PodSecurityStandard profile "restricted"
  disableRestrictedPSP: true # Disable PSP binding for the restricted PSP as last step during the PSP migration

# List all namespaces that should be created in every ServiceOps cluster
# For info about what overrides are available, please check ./common.yaml.
namespaces:
  kube-system:
    systemNamespace: true
    allowCriticalPods: true
    pspClusterRole: allow-privileged-psp
  istio-system:
    systemNamespace: true
    allowCriticalPods: true
  cert-manager:
    systemNamespace: true
    allowCriticalPods: true
  flink-operator:
    systemNamespace: true
  sidecar-controller:
    systemNamespace: true
  apertium: {}
  api-gateway: {}
  benthos-cache-invalidator: {}
  changeprop:
    resourcequota:
      compute:
        requests:
          cpu: "180"
          memory: "200Gi"
        limits:
          cpu: "180"
          memory: "200Gi"
    limitranges:
      container:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "5Gi"
          cpu: "8"
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default:
          memory: "100Mi"
          cpu: "100m"
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "5Gi"
          cpu: "10"
  changeprop-jobqueue:
    resourcequota:
      compute:
        requests:
          cpu: "180"
          memory: "200Gi"
        limits:
          cpu: "180"
          memory: "200Gi"
  chart-renderer: {}
  cirrus-streaming-updater:
    limitranges:
      container:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "4Gi"
          cpu: "8"
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default:
          memory: "100Mi"
          cpu: "100m"
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "5Gi"
          cpu: "10"
  citoid: {}
  commons-impact-analytics: {}
  cxserver: {}
  data-gateway: {}
  developer-portal:
    tlsExtraSANs:
      - developer.wikimedia.org
  device-analytics: {}
  echostore: {}
  edit-analytics: {}
  editor-analytics: {}
  eventgate-analytics:
    resourcequota:
      compute:
        requests:
          cpu: "90"
          memory: "100Gi"
        limits:
          cpu: "100"
          memory: "100Gi"
  eventgate-analytics-external: {}
  eventgate-logging-external: {}
  eventgate-main: {}
  eventstreams: {}
  eventstreams-internal: {}
  external-services:
    systemNamespace: true
    deployTLSCertificate: false
  geo-analytics: {}
  image-suggestion: {}
  ipoid:
    limitranges:
      container:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "24Gi"
          cpu: "8"
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default:
          memory: "100Mi"
          cpu: "100m"
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "26Gi"
          cpu: "10"
  kartotherian:
    resourcequota:
      compute:
        requests:
          cpu: "460"
          memory: "250Gi"
        limits:
          cpu: "460"
          memory: "250Gi"
  linkrecommendation: {}
  machinetranslation:
    limitranges:
      container:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "32Gi"
          cpu: "8"
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default:
          memory: "100Mi"
          cpu: "100m"
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "33Gi"
          cpu: "10"
    resourcequota:
      compute:
        requests:
          cpu: "90"
          memory: "150Gi"
        limits:
          cpu: "90"
          memory: "150Gi"
  mathoid: {}
  mw-mcrouter:
    deployTLSCertificate: false
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
  media-analytics: {}
  mw-page-content-change-enrich: {}
  miscweb:
    tlsExtraSANs:
      - static-bugzilla.wikimedia.org
      - 15.wikipedia.org
      - annual.wikimedia.org
      - bienvenida.wikimedia.org
      - dbtree.wikimedia.org
      - design.wikimedia.org
      - os-reports.wikimedia.org
      - research.wikimedia.org
      - security.wikimedia.org
      - static-codereview.wikimedia.org
      - static-rt.wikimedia.org
      - tendril.wikimedia.org
      - transparency-archive.wikimedia.org
      - transparency.wikimedia.org
      - wikiworkshop.org
      - www.wikiworkshop.org
  mobileapps:
    # Don't set a quota
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
    # Don't enforce ranges for containers or pods
    limitranges:
      container:
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default: ~
        min: ~
        max: ~
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
  mw-debug:
    pspClusterRole: allow-mediawiki-psp
   # The pod-security.wmf.org labels are used on Kubernetes 1.31 to customise
   # Pod Security Standards.
   # If you add or remove any policies from mw-pss-labels, please ensure
   # you do the same for mw-experimental further down.
    labels: &mw-pss-labels
      pod-security.wmf.org/profile: restricted
      pod-security.wmf.org/restrict-volume-types-restricted-volumes: exclude
      pod-security.wmf.org/disallow-host-path: exclude
      pod-security.wmf.org/allow-hostpath-geoip: include
      pod-security.wmf.org/disallow-capabilities-strict-adding-capabilities-strict: exclude
      pod-security.wmf.org/disallow-capabilities-adding-capabilities: exclude
      pod-security.wmf.org/disallow-capabilities-except-ptrace: include
    # Don't set a quota
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
    # Don't enforce ranges for containers or pods
    limitranges:
      container:
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default: ~
        min: ~
        max: ~
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
  mw-experimental:
  # In mw-experimental we need to mount via hostPath both geoip data + /srv/mediawiki
  # All hostPaths are included in the allow-hostpath-mw-experimental
  # ValidatingAdmissionPolicy, thus we can exclude allow-hostpath-geoip
    pspClusterRole: allow-mediawiki-psp
    labels:
      pod-security.wmf.org/profile: restricted
      pod-security.wmf.org/restrict-volume-types-restricted-volumes: exclude
      pod-security.wmf.org/disallow-host-path: exclude
      pod-security.wmf.org/disallow-capabilities-strict-adding-capabilities-strict: exclude
      pod-security.wmf.org/disallow-capabilities-adding-capabilities: exclude
      pod-security.wmf.org/disallow-capabilities-except-ptrace: include
      pod-security.wmf.org/allow-hostpath-mw-experimental: include
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
    # Don't enforce ranges for containers or pods
    limitranges:
      container:
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default: ~
        min: ~
        max: ~
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
  mw-misc:
    pspClusterRole: allow-mediawiki-psp
    # pod-security.wmf.org labels are used on k8s 1.31 to customize Pod Security Standards
    labels:
      <<: *mw-pss-labels
    tlsExtraSANs:
      - noc.wikimedia.org
  mw-wikifunctions:
    pspClusterRole: allow-mediawiki-psp
    # pod-security.wmf.org labels are used on k8s 1.31 to customize Pod Security Standards
    labels:
      <<: *mw-pss-labels
    # Don't set a quota
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
    # Don't enforce ranges for containers or pods
    limitranges:
      container:
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default: ~
        min: ~
        max: ~
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
    tlsExtraSANs:
      - wikifunctions.org
      - www.wikifunctions.org
      - mw-wikifunctions-ro.discovery.wmnet
  mw-api-int:
    pspClusterRole: allow-mediawiki-psp
    # pod-security.wmf.org labels are used on k8s 1.31 to customize Pod Security Standards
    labels:
      <<: *mw-pss-labels
    # Don't set a quota
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
    # Don't enforce ranges for containers or pods
    limitranges:
      container:
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default: ~
        min: ~
        max: ~
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
  mw-api-ext:
    pspClusterRole: allow-mediawiki-psp
    # pod-security.wmf.org labels are used on k8s 1.31 to customize Pod Security Standards
    labels:
      <<: *mw-pss-labels
    # Don't set a quota
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
    # Don't enforce ranges for containers or pods
    limitranges:
      container:
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default: ~
        min: ~
        max: ~
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
  mw-jobrunner:
    pspClusterRole: allow-mediawiki-psp
    # pod-security.wmf.org labels are used on k8s 1.31 to customize Pod Security Standards
    labels:
      <<: *mw-pss-labels
    # Don't set a quota
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
    # Don't enforce ranges for containers or pods
    limitranges:
      container:
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default: ~
        min: ~
        max: ~
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
  mw-parsoid:
    pspClusterRole: allow-mediawiki-psp
    # pod-security.wmf.org labels are used on k8s 1.31 to customize Pod Security Standards
    labels:
      <<: *mw-pss-labels
    # Don't set a quota
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
    # Don't enforce ranges for containers or pods
    limitranges:
      container:
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default: ~
        min: ~
        max: ~
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
  mw-script:
    pspClusterRole: allow-mediawiki-psp
    # pod-security.wmf.org labels are used on k8s 1.31 to customize Pod Security Standards
    labels:
      <<: *mw-pss-labels
    enableJobSidecarController: true
    # Don't set a quota
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
    # Don't enforce ranges for containers or pods
    limitranges:
      container:
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default: ~
        min: ~
        max: ~
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
  mw-cron:
    pspClusterRole: allow-mediawiki-psp
    # pod-security.wmf.org labels are used on k8s 1.31 to customize Pod Security Standards
    labels:
      <<: *mw-pss-labels
    enableJobSidecarController: true
    # Don't set a quota
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
    # Don't enforce ranges for containers or pods
    limitranges:
      container:
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default: ~
        min: ~
        max: ~
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
  mw-videoscaler:
    pspClusterRole: allow-mediawiki-psp
    # pod-security.wmf.org labels are used on k8s 1.31 to customize Pod Security Standards
    labels:
      <<: *mw-pss-labels
    enableJobSidecarController: true
    # Don't set a quota
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
    # Don't enforce ranges for containers or pods
    limitranges:
      container:
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default: ~
        min: ~
        max: ~
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
  mw-web:
    pspClusterRole: allow-mediawiki-psp
    # pod-security.wmf.org labels are used on k8s 1.31 to customize Pod Security Standards
    labels:
      <<: *mw-pss-labels
    # Don't set a quota
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
    # Don't enforce ranges for containers or pods
    limitranges:
      container:
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default: ~
        min: ~
        max: ~
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
  opentelemetry-collector:
    # Don't set a quota
    resourcequota:
      compute:
        requests:
          cpu: ~
          memory: ~
        limits:
          cpu: ~
          memory: ~
  page-analytics: {}
  proton:
    resourcequota:
      compute:
        requests:
          cpu: "120"
          memory: "100Gi"
        limits:
          cpu: "120"
          memory: "100Gi"
  push-notifications: {}
  wikidata-query-gui:
    tlsExtraSANs:
      - query.wikidata.org
      - query-main.wikidata.org
      - query-scholarly.wikidata.org
      - query-legacy-full.wikidata.org
      - commons-query.wikimedia.org
  ratelimit:
    deployTLSCertificate: false
  rdf-streaming-updater:
    # Bump max container memory limit to 7Gi, otherwise use the defaults
    limitranges:
      container:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "7Gi"
          cpu: "8"
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default:
          memory: "100Mi"
          cpu: "100m"
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "7.5Gi"
          cpu: "10"
  recommendation-api: {}
  rest-gateway: {}
  sessionstore: {}
  shellbox: {}
  shellbox-constraints:
    # Bump max container memory limit to 4Gi, otherwise use the defaults
    limitranges:
      container:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "4Gi"
          cpu: "8"
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default:
          memory: "100Mi"
          cpu: "100m"
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "5Gi"
          cpu: "10"
  shellbox-media: {}
  shellbox-syntaxhighlight: {}
  shellbox-timeline: {}
  shellbox-video:
    limitranges:
      container:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "6.5Gi"
          cpu: "8"
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default:
          memory: "100Mi"
          cpu: "100m"
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "7Gi"
          cpu: "10"
    resourcequota:
      compute:
        requests:
          cpu: "600"
          memory: "300Gi"
        limits:
          cpu: "600"
          memory: "480Gi"
  tegola-vector-tiles: {}
  termbox: {}
  thumbor:
    # Bump max memory limits, otherwise use the defaults
    limitranges:
      container:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "5Gi"
          cpu: "8"
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default:
          memory: "100Mi"
          cpu: "100m"
      pod:
        min:
          memory: "50Mi"
          cpu: "100m"
        max:
          memory: "35Gi"
          cpu: "18"
    resourcequota:
      compute:
        requests:
          cpu: "540"
          memory: "450Gi"
        limits:
          cpu: "1440"
          memory: "2400Gi"
  toolhub:
    enableJobSidecarController: true
  wikifeeds: {}
  wikifunctions: {}
  zotero: {}

GlobalNetworkPolicies:
  # Allow icmp for all pods and all directions. Useful in debugging
  allow-all-icmp:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name != "kube-system"'
    types:
      - Ingress
      - Egress
    ingress:
      - action: Allow
        protocol: ICMP
      - action: Allow
        protocol: ICMPv6
    egress:
      - action: Allow
        protocol: ICMP
      - action: Allow
        protocol: ICMPv6
  default-deny:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name != "kube-system"'
    types:
      - Ingress
      - Egress
    egress:
      # Allow all namespaces to communicate to DNS pods (UDP)
      - action: Allow
        protocol: UDP
        destination:
          services:
            name: "kube-dns"
            namespace: "kube-system"
      # Allow all namespaces to communicate to DNS pods (TCP)
      - action: Allow
        protocol: TCP
        destination:
          services:
            name: "kube-dns"
            namespace: "kube-system"
  # This allows egress from all pods to all pods. Ingress still needs to be
  # allowed by the destination, though.
  allow-pod-to-pod:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name not in {"kube-system", "wikifunctions"}'
    types:
      - Egress
    egress:
      - action: Allow
        destination:
          nets:
            # wikikube eqiad
            - "10.67.128.0/18"
            # wikikube codfw
            - "10.194.128.0/17"
            # staging-eqiad
            - "10.64.64.0/21"
            # staging-codfw
            - "10.192.64.0/21"
      - action: Allow
        destination:
          nets:
            # eqiad
            - "2620:0:861:cabe::/64"
            # codfw
            - "2620:0:860:cabe::/64"
            # staging-eqiad
            - "2620:0:861:babe::/64"
            # staging-codfw
            - "2620:0:860:babe::/64"
  # FIXE: This is probably no longer needed, everything should use CoreDNS now
  allow-dns:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name not in {"kube-system", "wikifunctions"}'
    types:
      - Egress
    egress:
      - action: Allow
        protocol: UDP
        destination:
          ports:
            - 53
          nets:
            - 10.3.0.1/32
  # Allow all pods access to url-downloaders
  allow-urldownloaders:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name not in {"kube-system", "wikifunctions"}'
    types:
      - Egress
    egress:
      - action: Allow
        protocol: TCP
        destination:
          ports:
            - 8080
          nets:
            - 208.80.154.75/32  # urldownloader1003
            - 208.80.155.118/32 # urldownloader1004
            - 208.80.153.72/32  # urldownloader2003
            - 208.80.153.109/32  # urldownloader2004
      - action: Allow
        protocol: TCP
        destination:
          ports:
            - 8080
          nets:
            - 2620:0:861:3:208:80:154:75/128  # urldownloader1003
            - 2620:0:861:4:208:80:155:118/128  # urldownloader1004
            - 2620:0:860:3:208:80:153:72/128  # urldownloader2003
            - 2620:0:860:4:208:80:153:109/128  # urldownloader2004
  # Allow all pods access to restbase
  allow-restbase:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name not in {"kube-system", "wikifunctions"}'
    types:
      - Egress
    egress:
      - action: Allow
        protocol: TCP
        destination:
          ports:
            - 7231
            - 7443
          nets:
            - 10.2.2.17/32
            - 10.2.1.17/32
  # Allow all pods access to uncached api
  allow-uncached-api:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name not in {"kube-system", "wikifunctions"}'
    types:
      - Egress
    egress:
      - action: Allow
        protocol: TCP
        destination:
          ports:
            - 80
            - 443
          nets:
            - 10.2.2.22/32
            - 10.2.1.22/32

typha:
  resources:
    requests:
      cpu: 300m
      memory: 150Mi
    limits:
      cpu: ~
      memory: 150Mi

kubeControllers:
  resources:
    requests:
      cpu: 300m
      memory: 150Mi
    limits:
      cpu: ~
      memory: 150Mi
