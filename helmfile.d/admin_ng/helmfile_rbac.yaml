releases:
  - name: rbac-rules
    chart: wmf-stable/raw
    namespace: kube-system
    values:
      - resources:
        # ClusterRoles
        ## Aggregates additional permission to view ClusterRole, not used directly
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: view-additions
            labels:
              # Add these permissions to the "view" default role.
              rbac.authorization.k8s.io/aggregate-to-view: "true"
          rules:
            - apiGroups: [""]
              resources: ["pods/portforward"]
              verbs: ["create"]
            {{- if hasKey .Environment.Values "istio_gateways" }}
            - apiGroups: ["networking.istio.io"]
              resources: ["gateways", "virtualservices", "destinationrules"]
              verbs: ["get", "list", "watch"]
            {{- end }}
            # TODO: Can be removed once all clusters are on k8s 1.31 as the new cert-manager version ships this rule.
            {{- if hasKey .Environment.Values "install_cert_manager" }}
            - apiGroups: ["cert-manager.io"]
              resources: ["certificates"]
              verbs: ["get", "list", "watch"]
            {{- end }}
            {{- if hasKey .Environment.Values "install_flink_operator" }}
            - apiGroups: ["flink.apache.org"]
              resources: ["flinkdeployments", "flinksessionjobs", "flinkstatesnapshots"]
              verbs: ["get", "list", "watch"]
            {{- end }}
            {{- if hasKey .Environment.Values "install_kserve" }}
            - apiGroups: ["serving.kserve.io"]
              resources: ["*"]
              verbs: ["get", "list", "watch"]
            {{- end }}
            {{- if hasKey .Environment.Values "install_cloudnative_pg_operator" }}
            - apiGroups: ["postgresql.cnpg.io"]
              resources: ["clusters", "poolers", "imagecatalogs", "scheduledbackups"]
              verbs: ["get", "list", "watch"]
            {{- end }}
            {{- if hasKey .Environment.Values "install_opensearch_operator" }}
            - apiGroups: ["opensearch.opster.io"]
              resources: ["opensearchactiongroups", "opensearchclusters", "opensearchcomponenttemplates", "opensearchindextemplates", "opensearchismpolicies", "opensearchroles", "opensearchsnapshotpolicies", "opensearchtenants", "opensearchuserrolebindings", "opensearchusers"]
              verbs: ["get", "list", "watch"]
            {{- end }}
            - apiGroups: ["crd.projectcalico.org"]
              resources: ["networkpolicies"]
              verbs: ["get", "list", "watch"]
        # We use the default system:monitoring for access to the control-plane monitoring endpoints.
        # However, this isn't enough and we also need a ClusterRole to allow listing/getting/watching various cluster resources
        # NOTE: Upstream, at https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/platform/rbac.md
        # has the following differences:
        # * Get on all configmaps, (to manage to start), we don't need that
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: prometheus
          rules:
          - apiGroups: [""]
            resources:
            - nodes
            - nodes/metrics
            - services
            - endpoints
            - pods
            verbs: ["get", "list", "watch"]
          - apiGroups:
            - discovery.k8s.io
            resources:
            - endpointslices
            verbs: ["get", "list", "watch"]
          - apiGroups:
            - networking.k8s.io
            resources:
            - ingresses
            verbs: ["get", "list", "watch"]
          - nonResourceURLs: ["/metrics"]
            verbs: ["get"]
        ## Used by imagecatalog
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: imagecatalog
          rules:
            - apiGroups: [""]
              resources: ["namespaces", "pods"]
              verbs: ["list", "get"]
        ## Used by debmonitor (via docker-report)
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: debmonitor
          rules:
            - apiGroups: [""]
              resources: ["namespaces", "pods"]
              verbs: ["list", "get"]
        ## Used by deploy users
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: deploy
          rules:
            - apiGroups: ["", "extensions", "apps", "networking.k8s.io", "batch"]
              resources: ["*"]
              verbs: ["*"]
            {{- if hasKey .Environment.Values "istio_gateways" }}
            - apiGroups: ["networking.istio.io"]
              resources: ["gateways", "virtualservices", "destinationrules"]
              verbs: ["*"]
            {{- end }}
            {{- if hasKey .Environment.Values "install_cert_manager" }}
            - apiGroups: ["cert-manager.io"]
              resources: ["certificates"]
              verbs: ["*"]
            {{- end }}
            {{- if hasKey .Environment.Values "install_flink_operator" }}
            - apiGroups: ["flink.apache.org"]
              resources: ["flinkdeployments", "flinksessionjobs", "flinkstatesnapshots"]
              verbs: ["*"]
            {{- end }}
            {{- if hasKey .Environment.Values "install_cloudnative_pg_operator" }}
            - apiGroups: ["postgresql.cnpg.io"]
              resources: ["clusters", "poolers", "imagecatalogs", "scheduledbackups", "backups"]
              verbs: ["*"]
            {{- end }}
            {{- if hasKey .Environment.Values "install_opensearch_operator" }}
            - apiGroups: ["opensearch.opster.io"]
              resources: ["opensearchactiongroups", "opensearchclusters", "opensearchcomponenttemplates", "opensearchindextemplates", "opensearchismpolicies", "opensearchroles", "opensearchsnapshotpolicies", "opensearchtenants", "opensearchuserrolebindings", "opensearchusers"]
              verbs: ["*"]
            {{- end }}
            - apiGroups: ["crd.projectcalico.org"]
              resources: ["networkpolicies"]
              verbs: ["*"]
      {{- range .Environment.Values.deployExtraClusterRoles }}
      {{- if eq . "kserve" }}
        ## Used by deploy users
        ## Kubeflow Kfserving/Kserve deploy users need extra permissions.
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: deploy-kserve
          rules:
            - apiGroups: ["", "extensions", "apps", "networking.k8s.io", "batch"]
              resources: ["*"]
              verbs: ["*"]
            - apiGroups: ["serving.kserve.io"]
              resources: ["inferenceservices"]
              verbs: ["*"]
            - apiGroups: ["crd.projectcalico.org"]
              resources: ["networkpolicies"]
              verbs: ["*"]
      {{- end }}
      {{- if eq . "airflow" }}
        ## Used by deploy users
        ## Airflow deploy users need the ability to create role/rolebindings to allow
        ## the airflow scheduler itself to create/delete/get/list/... Pods, when using
        ## the KubernetesExecutor
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: deploy-airflow
          rules:
            ## Note: all rules until the next comment are taken from the `deploy`
            ## ClusterRole. The intent is that this deploy-airflow should be able
            ## any resource commonly found in charts, that the `deploy` ClusterRole
            ## can deploy, and on top of that, it should be able to deploy Roles and
            ## RoleBindings
            - apiGroups: ["", "extensions", "apps", "networking.k8s.io", "batch"]
              resources: ["*"]
              verbs: ["*"]
            {{- if hasKey $.Environment.Values "istio_gateways" }}
            - apiGroups: ["networking.istio.io"]
              resources: ["gateways", "virtualservices", "destinationrules"]
              verbs: ["*"]
            {{- end }}
            {{- if hasKey $.Environment.Values "install_cert_manager" }}
            - apiGroups: ["cert-manager.io"]
              resources: ["certificates"]
              verbs: ["*"]
            {{- end }}
            {{- if hasKey $.Environment.Values "install_cloudnative_pg_operator" }}
            - apiGroups: ["postgresql.cnpg.io"]
              resources: ["clusters", "poolers", "imagecatalogs", "scheduledbackups", "backups"]
              verbs: ["*"]
            {{- end }}
            - apiGroups: ["crd.projectcalico.org"]
              resources: ["networkpolicies"]
              verbs: ["*"]
            ## End of the permissions taken from the `deploy` ClusterRole and start
            ## of the extra permissions.
            - apiGroups: ["rbac.authorization.k8s.io"]
              resources: ["roles", "rolebindings"]
              verbs: ["*"]

      {{- end }}
      {{- if eq . "opensearch" }}
        ## Used by deploy users
        ## opensearch deploy users need the ability to create role/rolebindings to allow
        ## the opensearch operator to create/delete/get/list/... pods
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: deploy-opensearch
          rules:
            ## Note: all rules until the next comment are taken from the `deploy`
            ## ClusterRole. The intent is that this deploy-opensearch should be able
            ## any resource commonly found in charts, that the `deploy` ClusterRole
            ## can deploy, and on top of that, it should be able to deploy Roles and
            ## RoleBindings
            - apiGroups: ["", "extensions", "apps", "networking.k8s.io", "batch"]
              resources: ["*"]
              verbs: ["*"]
            {{- if hasKey $.Environment.Values "istio_gateways" }}
            - apiGroups: ["networking.istio.io"]
              resources: ["gateways", "virtualservices", "destinationrules"]
              verbs: ["*"]
            {{- end }}
            {{- if hasKey $.Environment.Values "install_cert_manager" }}
            - apiGroups: ["cert-manager.io"]
              resources: ["certificates"]
              verbs: ["*"]
            {{- end }}
            - apiGroups: ["crd.projectcalico.org"]
              resources: ["networkpolicies"]
              verbs: ["*"]
            ## End of the permissions taken from the `deploy` ClusterRole and start
            ## of the extra permissions.
            - apiGroups: ["rbac.authorization.k8s.io"]
              resources: ["roles", "rolebindings"]
              verbs: ["*"]

      {{- end }}
      {{- if eq . "mediawiki-dumps-legacy" }}
        ## Used by deploy users
        ## mediawiki-dumps-legacy deploy users need the ability to create role/rolebindings
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: deploy-mediawiki-dumps-legacy
          rules:
            ## Note: all rules until the next comment are taken from the `deploy`
            ## ClusterRole. The intent is that this deploy-mediawiki-dumps-legacy
            ## should be able any resource commonly found in charts, that the `deploy`
            ## ClusterRole can deploy, and on top of that, it should be able to deploy
            ## Roles and RoleBindings
            - apiGroups: ["", "extensions", "apps", "networking.k8s.io", "batch"]
              resources: ["*"]
              verbs: ["*"]
            {{- if hasKey $.Environment.Values "istio_gateways" }}
            - apiGroups: ["networking.istio.io"]
              resources: ["gateways", "virtualservices", "destinationrules"]
              verbs: ["*"]
            {{- end }}
            {{- if hasKey $.Environment.Values "install_cert_manager" }}
            - apiGroups: ["cert-manager.io"]
              resources: ["certificates"]
              verbs: ["*"]
            {{- end }}
            {{- if hasKey $.Environment.Values "install_cloudnative_pg_operator" }}
            - apiGroups: ["postgresql.cnpg.io"]
              resources: ["clusters", "poolers", "imagecatalogs", "scheduledbackups", "backups"]
              verbs: ["*"]
            {{- end }}
            - apiGroups: ["crd.projectcalico.org"]
              resources: ["networkpolicies"]
              verbs: ["*"]
            ## End of the permissions taken from the `deploy` ClusterRole and start
            ## of the extra permissions.
            - apiGroups: ["rbac.authorization.k8s.io"]
              resources: ["roles", "rolebindings"]
              verbs: ["*"]

      {{- end }}
      {{- if eq . "liftwing-debugging" }}
        ## Used by ml-team to manage/debug pods in experimental namespace
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            namespace: experimental
            name: ml-experimental-edit
          rules:
            - apiGroups: [ "" ]
              resources: [ "pods", "pods/log", "pods/exec", "pods/portforward", "pods/attach" ]
              verbs: [ "*" ]
            - apiGroups: ["serving.knative.dev"]
              resources: ["revisions"]
              verbs: ["*"]
            - apiGroups: ["serving.kserve.io"]
              resources: ["inferenceservices"]
              verbs: ["*"]
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: ml-experimental-edit
            namespace: experimental
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: ml-experimental-edit
          subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: User
            name: experimental-debug
      {{- end }}
      {{- if eq . "sparkapplications" }}
        ## Used by deploy users
        ## Spark deploy users need to be able to create SparkApplication and
        ## ScheduledSparkApplication objects in the spark namespace.
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: deploy-sparkapplications
          rules:
            - apiGroups: ["sparkoperator.k8s.io"]
              resources: ["sparkapplications", "scheduledsparkapplications"]
              verbs: ["*"]
            - apiGroups: ["sparkoperator.k8s.io"]
              resources: ["sparkapplications/status", "scheduledsparkapplications/status"]
              verbs: ["get"]
      {{- end }}
      {{- end }}
        ## Used by prometheus and rsyslog
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: view
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: view
          subjects:
            - apiGroup: rbac.authorization.k8s.io
              kind: Group
              name: view
        ## Used by prometheus
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: prometheus
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: prometheus
          subjects:
            - apiGroup: rbac.authorization.k8s.io
              kind: User
              name: prometheus
        ## Used by imagecatalog
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: imagecatalog
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: imagecatalog
          subjects:
            - apiGroup: rbac.authorization.k8s.io
              kind: User
              name: imagecatalog
        ## Used by debmonitor (via docker-report)
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: debmonitor
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: debmonitor
          subjects:
            - apiGroup: rbac.authorization.k8s.io
              kind: User
              name: debmonitor
