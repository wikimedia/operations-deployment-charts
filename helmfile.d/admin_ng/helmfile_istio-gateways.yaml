# Setup network policies for the setup of Istio gateways
#
# Requirements:
# This requires the istio-system namespace to be created via
# helmfile_namspaces.yaml. Also istio needs to be deployed using
# custom_deploy.d.
#
templates:
  default: &default
    chart: wmf-stable/raw
    namespace: istio-system
    installedTemplate: "{{`{{ if hasKey .Environment.Values \"istio_gateways\" }}{{ .Environment.Values.istio_gateways }}{{ else }}{{ false }}{{end}}`}}"

releases:
  {{- $istio_gateways := .Environment.Values | get "istio.gateways" dict }}
  - name: istio-gateways-networkpolicies
    <<: *default
    needs:
      - kube-system/namespaces
      - kube-system/calico-crds
    values:
      - resources:
        # Allow all pods in this namespace to contact the Kubernetes API
          - apiVersion: crd.projectcalico.org/v1
            kind: NetworkPolicy
            metadata:
              name: istiod-calico
            spec:
              types:
                - Egress
                - Ingress
              selector: "istio == 'pilot'"
              egress:
              # Allow the istiod pods to contact the Kubernetes API
                - action: Allow
                  destination:
                    services:
                      name: kubernetes
                      namespace: default
              ingress:
              # Allow prometheus to scrape
                - action: Allow
                  protocol: TCP
                  destination:
                    ports:
                      - 15014
              # Allow Istio Gateways to talk to istiod
              {{- range $istio_gateway, $settings := $istio_gateways }}
                - action: Allow
                  protocol: TCP
                  source:
                    selector: "istio == '{{ $istio_gateway }}'"
                  destination:
                    ports:
                      - 15012
               {{- end }}
              # Allow kubernetes apiservers to call webhooks served by istiod
                - action: Allow
                  protocol: TCP
                  source:
                    services:
                      name: kubernetes
                      namespace: default
                  destination:
                    ports:
                      - 15017

          {{- range $istio_gateway, $settings := $istio_gateways }}
          - apiVersion: networking.k8s.io/v1
            kind: NetworkPolicy
            metadata:
              name: istio-{{ $istio_gateway }}
              namespace: istio-system
            spec:
              podSelector:
                matchLabels:
                  istio: {{ $istio_gateway }}
              ingress:
                - ports:
                  # Allow prometheus to scrape
                  - port: 15020
                    protocol: TCP
                  # Port used to send readiness probes.
                  - port: 15021
                    protocol: TCP
                  # Allow traffic from other pods to its HTTP proxy ports
                  {{- range $settings.ports }}
                  - port: {{ . }}
                    protocol: TCP
                  {{- end }}
                # Allow istiod to push updates to ingressgateway
                # This is already allowed using the global allow-pod-to-pod rule
                - from:
                    - podSelector:
                        matchLabels:
                          istio: pilot
                  ports:
                    - port: 15012
                      protocol: TCP
          {{- $egress_endpoints := $settings | get "egress_endpoints" dict }}
          {{- with $egress_endpoints }}
              egress:
          {{- range $endpoint_settings := . }}
                - to:
                  - ipBlock:
                      cidr: {{ $endpoint_settings.cidr }}
                  ports:
                    - port: {{ $endpoint_settings.port }}
                      protocol: {{ $endpoint_settings.protocol }}
          {{- end }}
          {{- end }}
          {{- end }}
  # Objects that depend on istio CRDs need to go into a separate release to avoid catch-22
  - name: istio-gateways-envoyfilters
    <<: *default
    needs:
      - kube-system/namespaces
    values:
      - resources:
          # Istio leaves envoy at the default configuration regarding HTTP
          # Server header behavior This means envoy forcefully sets it to the
          # server_name stanza, which is "istio-envoy" making it impossible to
          # differentiate between the backends, which is a feature we want for
          # debugging. Add an EnvoyFilter configuration, applying it only to
          # the ingressgateway, that sets APPEND_IF_ABSENT, which will only set
          # the Server header if the fronted application doesn't set it.
          # We want to set this globally for all fronted applications, so the
          # filterChain on purpose doesn't match on any of the other predicates
          # it supports
          - apiVersion: networking.istio.io/v1alpha3
            kind: EnvoyFilter
            metadata:
              name: preserve-server-header
              namespace: istio-system
            spec:
              workloadSelector:
                labels:
                  istio: ingressgateway
              configPatches:
                - applyTo: NETWORK_FILTER # http connection manager is a filter in Envoy
                  match:
                    context: GATEWAY
                    listener:
                      filterChain:
                        filter:
                          name: "envoy.filters.network.http_connection_manager"
                  patch:
                    operation: MERGE
                    value:
                      typed_config:
                        "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
                        server_header_transformation: APPEND_IF_ABSENT

