service:
  deployment: production
  port: 33192

networkpolicy:
  egress:
    enabled: true

mesh:
  enabled: true
  certmanager:
    extraFQDNs:
      - intake-logging.wikimedia.org
  public_port: 4392 # the port where TLS will be exposed
  resources:
    requests:
      cpu: 500m
      memory: 100Mi
    limits:
      cpu: 1
      memory: 500Mi


discovery:
  # List of listeners. These should match service mesh endpoint names
  # (defined in https://gerrit.wikimedia.org/g/operations/puppet/+/refs/heads/production/hieradata/common/profile/services_proxy/envoy.yaml)
  listeners:
    - mw-api-int-async-ro # used for EventStreamConfig API endpoint.
    - schema      # schema.discovery.wmnet

resources:
  replicas: 4

main_app:
  name: eventgate-logging-external
  version: v1.24.0
  conf:
    # eventgate-logging-external is used to intake w3c browser reportingapi reports
    # like Network Error Logging.  Since reportingapi is not POSTing via sendBeacon,
    # we need to set access-control-allow-origin: '*'.
    cors: '*'

    kafka:
      conf:
        # NOTE: The kafka brokers list is set in site specific values files.
        #metadata.broker.list:
        # Enforce a smaller message size limit for this externally accessible eventgate instance.
        message.max.bytes: 1048576
        # Enable Kafka producer TLS (no authentication, just encryption).
        security.protocol: ssl

    # The request body is accepted as an array of events, each of which
    # will be an individual message in Kafka.  Each individual
    # message must be smaller than message.max.bytes, but EventGate
    # can accept multiple events at once in the request body.
    # Limit this to a smaller size for this externally accessible eventgate instance.
    max_body_size: 4mb

    schema_base_uris:
    - "file:///srv/service/schemas/event/primary/jsonschema/"
    - "file:///srv/service/schemas/event/secondary/jsonschema/"
    - "http://127.0.0.1:6023/repositories/primary/jsonschema/"   # schema service mesh port
    - "http://127.0.0.1:6023/repositories/secondary/jsonschema/" # schema service mesh port

    schema_precache_uris:
    - /error/1.0.0
    - /test/event/1.0.0
    - /mediawiki/client/error/1.0.0
    - /w3c/reportingapi/network_error/1.0.0

    # Request static stream config during startup from the EventStreamConfig extension
    # stream_config_ttl is not set, so stream configs will be cached permanently.
    # MW API endpoint for all streams with destination_event_service == eventgate-logging-external.
    # We use meta.wikimedia.org here as the default stream configuration wiki.
    # Streams can be configured per wiki in mediawiki-config, but they should always be at
    # least configured with a stream name and schema_title available from meta.wikimedia.org.
    stream_config_uri: 'http://127.0.0.1:6500/w/api.php?format=json&action=streamconfigs&constraints=destination_event_service=eventgate-logging-external'
    stream_config_uri_options: {'headers': {'Host': 'meta.wikimedia.org'}}
    # Expect the stream -> settings map in the response at this subobject key
    stream_config_object_path: streams

    # Setting these will instruct eventgate-wikimedia to
    # use the values of these query parameters as defaults
    # for the schema_uri_field and the stream_field if they
    # are not set in the event data.  This allows
    # the stream and schema for an event to be passed in
    # via the URL rather than needing to be in the event in the POST body.
    schema_uri_query_param: schema_uri
    stream_query_param: stream

    # If test_events is set, EventGate will set up a /v1/_test/events
    # route that will process these test_events as if they were POSTed
    # to /v1/events. This is used for the k8s readinessProbe.
    # IMPORTANT:
    # If you are using stream config, make sure this stream is configured!
    # If using local stream config, the _stream-config.yaml template
    # will automatically configure an <main_app.name>.test.event stream,
    # so in your helmfiles you should override this to a test event
    # that prodcues to that stream.  If you are using remote
    # stream config, you must configure these streams explicitly there.
    test_events:
    - $schema: /test/event/1.0.0
      meta:
          # make sure this is configured in stream config if you are using it.
        stream: eventgate-logging-external.test.event

