helmDefaults:
  createNamespace: false
  verify: false
  atomic: true
  timeout: 600
  force: false
  args:
    # kubeconfig file can be overwritten using the environment state value kubeConfig (e.g. to deploy to staging-codfw).
    # Use the following example as a reference:
    # helmfile --state-values-set kubeConfig=/path/to/config -e environment apply
    - --kubeconfig
    - {{ .Environment.Values | get "kubeConfig" (printf "/etc/kubernetes/wikifunctions-deploy-%s.config" .Environment.Name) }}

environments:
  staging: &default_values
    values:
      - releases:
        - main-orchestrator
        - javascript-evaluator
        - python-evaluator
      - "/etc/helmfile-defaults/general-{{ .Environment.Name }}.yaml"
    missingFileHandler: Warn
  eqiad:
    <<: *default_values
  codfw:
    <<: *default_values

---

bases:
  - ../global.yaml

templates:
  default: &default
    namespace: wikifunctions
    # Allow to forcibly recreate pods by passing --state-values-set roll_restart=1 on the command line
    recreatePods: {{ if (hasKey .Environment.Values "roll_restart") }}{{ eq .Environment.Values.roll_restart 1 }}{{ else }}false{{end}}
    # This template gets applied for every release, all of which are applied in every environment
    # The installedTemplate line below is how we guarantee we only install the appropriate release in each enviornment.
    # If you don't define environment.values.releases for an environment, this template will fail and raise an error.
    installedTemplate: '{{`{{ if hasKey .Environment.Values "releases" }}{{ has .Release.Name .Environment.Values.releases }}{{ else }}{{ "no releases defined for this environment" | fail }}{{end}}`}}'
    missingFileHandler: Warn
    values:
      - /etc/helmfile-defaults/mediawiki/mcrouter_pools.yaml # mcrouter pools, puppet generated
      - "/etc/helmfile-defaults/general-{{ .Environment.Name }}.yaml" # general default values, controlled by SRE
      - "values.yaml" # non-env-specific values, in this repository
      - "/etc/helmfile-defaults/private/main_services/wikifunctions/{{ .Environment.Name }}.yaml" # prod-specific secrets, controlled by SRE
      - "values-{{ .Environment.Name }}.yaml" # env-specific overrides
      - "values-{{`{{ .Release.Name }}`}}.yaml" # release-specific overrides
      - "values-{{`{{ .Release.Name }}`}}-{{ .Environment.Name }}.yaml" # release-specific and environment overrides

hooks:
  - events: ["prepare"]
    command: "helmfile_log_sal"
    args:
      [
        "{{`{{.HelmfileCommand}}`}}",
        "[{{`{{ .Environment.Name }}`}}] START helmfile.d/services/wikifunctions: {{`{{.HelmfileCommand}}`}}",
      ]
  - events: ["cleanup"]
    command: "helmfile_log_sal"
    args:
      [
        "{{`{{.HelmfileCommand}}`}}",
        "[{{`{{ .Environment.Name }}`}}] DONE helmfile.d/services/wikifunctions: {{`{{.HelmfileCommand}}`}}",

      ]

releases:
  - name: main-orchestrator
    <<: *default
    chart: wmf-stable/function-orchestrator

  # TODO (T343389): Split each language evaluator into a release for each supported version of python and JS.

  - name: javascript-evaluator
    <<: *default
    chart: wmf-stable/function-evaluator

  - name: python-evaluator
    <<: *default
    chart: wmf-stable/function-evaluator
