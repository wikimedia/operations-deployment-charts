helm_scaffold_version: 0.3

docker:
  registry: docker-registry.discovery.wmnet
  pull_policy: IfNotPresent

resources:
  replicas: 9

main_app:
  image: wikimedia/operations-software-tegola
  version:  2024-09-13-081439-publish
  requests:
    cpu: 200m
    memory: 512Mi
  limits:
    cpu: 4
    memory: 2048Mi
  pregen_requests:
    cpu: 200m
    memory: 512Mi
  pregen_limits:
    cpu: 8
    memory: 2048Mi
  postgres:
    user: tegola
    host: localhost
    max_connections: 20

monitoring:
  enabled: true

service:
  deployment: production

mesh:
  enabled: true
  public_port: 4105
  telemetry:
    enabled: true

tileCaching:
  enabled: true
  config:
    type: "s3"  # S3 compatible API on swift
    endpoint: "http://localhost:6022"
    req_signing_host: "thanos-swift.discovery.wmnet"

tilePregeneration:
  cronJobEnabled: true
  parallelism: 3

# Temporarily we will use envoy as a L4 tcp proxy until envoy's
# Postgres proxy filter is production ready
# https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/network_filters/postgres_proxy_filter#config-network-filters-postgres-proxy
tcp_proxy:
  listeners:
    - maps_postgres

tcp_services_proxy:
  maps_postgres:
    # Basic TCP health checks
    # For more info: https://www.envoyproxy.io/docs/envoy/v1.23.12/api-v3/config/core/v3/health_check.proto#envoy-v3-api-msg-config-core-v3-healthcheck
    health_checks:
    - timeout: 5s
      interval: 1s
      unhealthy_threshold: 3
      initial_jitter: 1s
      healthy_threshold: 5
      tcp_health_check: {}
      always_log_health_check_failures: true
      event_log_path: "/dev/stdout"
    port: 5432
    connect_timeout: "60s"


discovery:
  listeners:
  - thanos-swift


networkpolicy:
  egress:
    enabled: true
