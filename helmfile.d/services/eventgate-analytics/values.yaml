service:
  deployment: production
  port: 35192

networkpolicy:
  egress:
    enabled: true

mesh:
  enabled: true
  public_port: 4592 # the port where TLS will be exposed

discovery:
  # List of listeners. These should match service mesh endpoint names
  # (defined in https://gerrit.wikimedia.org/g/operations/puppet/+/refs/heads/production/hieradata/common/profile/services_proxy/envoy.yaml)
  listeners:
    - mw-api-int-async-ro # used for EventStreamConfig API endpoint.
    - schema      # schema.discovery.wmnet

external_services:
  kafka: [jumbo-eqiad]

main_app:
  name: eventgate-analytics
  version: v1.11.0
  conf:
    kafka:
      conf:
        # eventgate-analytics always uses kafka jumbo-eqiad.
        metadata.broker.list: kafka-jumbo1007.eqiad.wmnet:9093,kafka-jumbo1008.eqiad.wmnet:9093,kafka-jumbo1009.eqiad.wmnet:9093,kafka-jumbo1010.eqiad.wmnet:9093,kafka-jumbo1011.eqiad.wmnet:9093,kafka-jumbo1012.eqiad.wmnet:9093,kafka-jumbo1013.eqiad.wmnet:9093,kafka-jumbo1014.eqiad.wmnet:9093,kafka-jumbo1015.eqiad.wmnet:9093
        security.protocol: ssl
    schema_precache_uris:
    - /error/1.0.0
    - /test/event/1.0.0
    - /api-gateway/request/1.0.0
    - /mediawiki/api/request/1.0.0
    - /mediawiki/cirrussearch/request/0.0.1
    - /sparql/query/1.2.0

    # /srv/service/schemas/event/{primary,secondary} is in the eventgate-wikmiedia image cloned at
    # image build time from https://gerrit.wikimedia.org/r/schemas/event/{primary,secondary}
    # http://schema.discovery.wmnet hosts a more up to date clone of the secondary (and other)
    # event schema repositories. These will all be used when looking up schemas.
    # By also using a remote schema URI, eventgate can discover new schemas without rebuilding the
    # image.
    schema_base_uris:
    - 'file:///srv/service/schemas/event/primary/jsonschema/'
    - 'file:///srv/service/schemas/event/secondary/jsonschema/'
    - 'http://127.0.0.1:6023/repositories/primary/jsonschema/'   # schema service mesh port
    - 'http://127.0.0.1:6023/repositories/secondary/jsonschema/' # schema service mesh port

    # Request static stream config during startup from the EventStreamConfig extension.
    # stream_config_ttl is not set, so stream configs will be cached permanently.
    # The service will require a restart to pick up new streams.
    # MW API endpoint for all streams with destination_event_service == eventgate-analytics
    # We use meta.wikimedia.org here as the default stream configuration wiki.
    # Streams can be configured per wiki in mediawiki-config, but they should always be at
    # least configured with a stream name and schema_title available from meta.wikimedia.org.
    stream_config_uri: 'http://127.0.0.1:6500/w/api.php?format=json&action=streamconfigs&constraints=destination_event_service=eventgate-analytics'
    stream_config_uri_options: {'headers': {'Host': 'meta.wikimedia.org'}}
    # Expect the stream -> settings map in the response at this subobject key
    stream_config_object_path: streams

    # If test_events is set, EventGate will set up a /v1/_test/events
    # route that will process these test_events as if they were POSTed
    # to /v1/events. This is used for the k8s readinessProbe.
    # IMPORTANT:
    # If you are using stream config, make sure this stream is configured!
    # If using local stream config, the _stream-config.yaml template
    # will automatically configure an <main_app.name>.test.event stream,
    # so in your helmfiles you should override this to a test event
    # that prodcues to that stream.  If you are using remote
    # stream config, you must configure these streams explicitly there.
    test_events:
    - $schema: /test/event/1.0.0
      meta:
          # make sure this is configured in stream config if you are using it.
        stream: eventgate-analytics.test.event
